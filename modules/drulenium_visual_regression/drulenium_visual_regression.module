<?php

define("SAUCE_CACHE_EXPIRE_TIME", time() + 72*60*60); //in hours
define("DRULENIUM_NODE_LIMIT", 3);

/**
 * @file
 * Module code for Drulenium Visual Regression.
 */

/**
 * Implements hook_perm().
 */
function drulenium_visual_regression_permission() {
  return array(
    'run_visual_tests' => array(
      'title' => t('Run Tests'),
      'description' => t('Configure, Run & Compare tests.'),
    ),
    'access_visual_test_reports' => array(
      'title' => t('Access Test reports'),
      'description' => t('Access visual test reports run by Drulenium.'),
    ),
    'administer_drulenium_vr' => array(
      'title' => t('Administer Drulenium VR config'),
      'description' => t('Configure & run cleanup tasks.'),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 *
 * For defining external libraries.
 */
function drulenium_visual_regression_libraries_info() {
  // A very simple library. No changing APIs (hence, no versions), no variants.
  // Expected to be extracted into 'sites/all/libraries/simple'.
  $libraries['selenium_webdriver'] = array(
    'name' => 'selenium_webdriver',
    'vendor url' => 'https://github.com/facebook/php-webdriver',
    'download url' => 'https://github.com/facebook/php-webdriver',
    'version' => '1',
   /* 'version arguments' => array(
      'file' => 'simple.js', // Could be any file with version info
      'pattern' => '/Version (\d+)/',
      'lines' => 5,
    ), */
    'files' => array(
      'php' => array('lib/__init__.php'),
    ),
  );
  $libraries['php-github-api'] = array(
      'name' => 'php-github-api',
      'vendor url' => 'https://github.com/KnpLabs/php-github-api',
      'download url' => 'https://github.com/KnpLabs/php-github-api',
      'version' => '1',
      'files' => array(
          'php' => array('vendor/autoload.php'),
      ),
  );
  $libraries['sausage'] = array(
      'name' => 'sausage',
      'vendor url' => 'https://github.com/jlipps/sausage',
      'download url' => 'https://github.com/jlipps/sausage',
      'version' => '1',
      'files' => array(
          'php' => array('vendor/autoload.php'),
      ),
  );
  return $libraries;
}

/**
 * Implements hook_menu().
 */
function drulenium_visual_regression_menu() {
  $items['drulenium/vr'] = array(
    'type' => MENU_LOCAL_TASK,
    'weight' => 999,
    'title' => 'Visual Regression',
    'description' => 'Configuration for Visual Regression Testing.',
    'page callback' => 'drulenium_visual_regression_releases',
    'page arguments' => array(2),
    'access callback' => 'user_access',
    'access arguments' => array('run_visual_tests'),
  );
  $items['drulenium/vr/release'] = array(
    'title' => 'Release',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drulenium_visual_regression_release_detail',
    'page arguments' => array(3),
    'access arguments' => array('run_visual_tests'),
  );
  $items['drulenium/vr/delete-release/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drulenium_visual_regression_release_delete_form', 3),
    'access arguments' => array('run_visual_tests'),
    'type' => MENU_CALLBACK,
  );
  $items['drulenium/vr/release/status/%'] = array(
    'title' => 'Manual Release Status check',
    'page callback' => 'drulenium_visual_regression_release_status',
    'page arguments' => array(4),
    'access arguments' => array('run_visual_tests'),
    'type' => MENU_CALLBACK,
  );
  $items['drulenium/vr/release/process-local/%'] = array(
    'title' => 'Process Release Locally',
    'page callback' => 'drulenium_visual_regression_release_process_local',
    'page arguments' => array(4),
    'access arguments' => array('run_visual_tests'),
    'type' => MENU_CALLBACK,
  );
  $items['drulenium/vr/release/process-saucelabs/%'] = array(
    'title' => 'Process Release using Sauce Labs',
    'page callback' => 'drulenium_visual_regression_release_process_saucelabs',
    'page arguments' => array(4),
    'access arguments' => array('run_visual_tests'),
    'type' => MENU_CALLBACK,
  );
  $items['drulenium/vr/compare'] = array(
    'title' => 'Compare',
    'page callback' => 'drulenium_visual_regression_releases_compare_admin',
    'page arguments' => array(3,4),
    'access arguments' => array('run_visual_tests'),
  );
  $items['drulenium/vr/compare/status/%/%'] = array(
    'title' => 'Manual Compare Status check',
    'page callback' => 'drulenium_visual_regression_compare_status',
    'page arguments' => array(4,5),
    'access arguments' => array('run_visual_tests'),
    'type' => MENU_CALLBACK,
  );
  $items['drulenium/vr/compare/process-local/%/%'] = array(
    'title' => 'Process Comparision Locally',
    'page callback' => 'drulenium_visual_regression_compare_process_local',
    'page arguments' => array(4,5),
    'access arguments' => array('run_visual_tests'),
    'type' => MENU_CALLBACK,
  );
  $items['drulenium_vr/vote/js'] = array(
    'page callback' => 'drulenium_visual_regression_vote_ahah',
    'access arguments' => array('run_visual_tests'),
    'type' => MENU_CALLBACK,
  );
  $items['vr/twenty-twenty/%/%'] = array(
    'page callback' => 'drulenium_visual_regression_compare_snapshots_twenty_twenty',
    'page arguments' => array(2,3),
    'access callback' => '_drulenium_visual_regression_access_vr_compare',
    'access arguments' => array(2, 3, 4),
    'type' => MENU_CALLBACK,
  );
  $items['vr/compare/%/%'] = array(
    'title' => 'Compare',
    'page callback' => 'drulenium_visual_regression_releases_compare',
    'page arguments' => array(2,3),
    'access callback' => '_drulenium_visual_regression_access_vr_compare',
    'access arguments' => array(2, 3, 4),
    'type' => MENU_CALLBACK,
  );
  $items['drulenium/settings'] = array(
    'type' => MENU_LOCAL_TASK,
    'weight' => 1000,
    'title' => 'Settings',
    'description' => 'Settings for Drulenium functionality.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drulenium_visual_regression_admin_settings_form'),
    'access arguments' => array('administer_drulenium_vr'),
  );
  $items['drulenium/settings/vr'] = array(
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
      'title' => 'Visual regression settings',
      'description' => 'Settings for Visual regression functionality.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('drulenium_visual_regression_admin_settings_form'),
      'access arguments' => array('administer_drulenium_vr'),
  );
  $items['drulenium/settings/cleanup'] = array(
      'type' => MENU_LOCAL_TASK,
      'weight' => 2,
      'title' => 'Cleanup',
      'description' => 'Cleanup Drulenium data',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('drulenium_visual_regression_cache_settings_form'),
      'access arguments' => array('administer_drulenium_vr'),
      'file' => 'drulenium_visual_regression.admin.inc',
  );
  $items['drulenium/settings/github'] = array(
      'type' => MENU_LOCAL_TASK,
      'weight' => 8,
      'title' => 'GitHub',
      'description' => 'Settings for Github Integration.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('drulenium_visual_regression_github_settings_form'),
      'access arguments' => array('administer_drulenium_vr'),
      'file' => 'drulenium_visual_regression.admin.inc',
  );
  $items['drulenium/settings/saucelabs'] = array(
      'type' => MENU_LOCAL_TASK,
      'weight' => 6,
      'title' => 'Sauce Labs',
      'description' => 'Settings for Sauce Labs Integration.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('drulenium_visual_regression_saucelabs_settings_form'),
      'access arguments' => array('administer_drulenium_vr'),
      'file' => 'drulenium_visual_regression.admin.inc',
  );
  $items['drulenium/settings/browserstack'] = array(
      'type' => MENU_LOCAL_TASK,
      'weight' => 5,
      'title' => 'BrowserStack',
      'description' => 'Settings for BrowserStack Integration.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('drulenium_visual_regression_browserstack_settings_form'),
      'access arguments' => array('administer_drulenium_vr'),
      'file' => 'drulenium_visual_regression.admin.inc',
  );
  $items['drulenium/settings/local'] = array(
      'type' => MENU_LOCAL_TASK,
      'weight' => 4,
      'title' => 'Local Server',
      'description' => 'Settings for Local Server Integration.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('drulenium_visual_regression_local_settings_form'),
      'access arguments' => array('administer_drulenium_vr'),
      'file' => 'drulenium_visual_regression.admin.inc',
  );

  return $items;
}

function drulenium_visual_regression_compare_snapshots_twenty_twenty($base_run_id, $cmp_run_id) {
  drupal_add_js('https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js', 'external');
  drupal_add_js(drupal_get_path('module', 'drulenium_visual_regression') . '/js/jquery.twentytwenty.js');
  drupal_add_js(drupal_get_path('module', 'drulenium_visual_regression') . '/js/jquery.event.move.js');
  drupal_add_js(drupal_get_path('module', 'drulenium_visual_regression') . '/js/vr_twenty.js');
  drupal_add_css(drupal_get_path('module', 'drulenium_visual_regression') . '/css/twentytwenty.css');
  $base_run_image_path = db_select('drulenium_vr_runs', 'vr_ru')
    ->fields('vr_ru', array('snapshot'))
    ->condition('vr_ru.rid', $base_run_id)
    ->execute()
    ->fetchfield();
  $cmp_run_image_path = db_select('drulenium_vr_runs', 'vr_ru')
    ->fields('vr_ru', array('snapshot'))
    ->condition('vr_ru.rid', $cmp_run_id)
    ->execute()
    ->fetchfield();
  $output = '<div id="container1">
  <img src="'.$base_run_image_path.'">
  <img src="'.$cmp_run_image_path.'">
</div>';
  return $output;
}

/**
 * AHAH callback for the vote buttons.
 */
function drulenium_visual_regression_vote_ahah() {
  $unique_content_id = filter_var(trim(filter_xss($_POST["unique_id"])), FILTER_SANITIZE_STRING, FILTER_FLAG_STRIP_LOW | FILTER_FLAG_STRIP_HIGH);
  // Convert content ID to MD5 hash (optional)
  //$unique_content_id = hash('md5', $unique_content_id);
  $user_vote_type = trim(filter_xss($_POST['vote']));

  switch ($user_vote_type) {

    ##### User liked the content #########
    case 'up':

      // Check if user has already voted, determined by unique content cookie.
      if (isset($_COOKIE["voted_".$unique_content_id])) {
        // Cookie found, user has already voted.
        header('HTTP/1.1 500 Already Voted');
        exit();
      }

      // Get vote_up value from db using unique_content_id.
      $criteria = array(
        'content_type' => 'drulenium_vr',
        'value_type' => 'points',
        'content_id' => $unique_content_id,
        'tag' => 'change_up',
      );
      $ret = votingapi_select_results($criteria, 1);
      $get_vote_up = 0;
      if (!empty($ret)) {
        $get_vote_up = $ret[0]['value'];
      }

      $vote = array(
        'content_type' => 'drulenium_vr',
        'value_type' => 'points',
        'content_id' => $unique_content_id,
        'value' => $get_vote_up + 1,
        'tag' => 'change_up',
      );
      $votes = array($vote);
      votingapi_set_votes($votes);

      setcookie("voted_" . $unique_content_id, 1, time() + 7200); // set cookie that expires in 2 hour "time()+7200".
      // Display total liked votes.
      echo ($get_vote_up + 1);
      break;

      ##### User disliked the content #########
    case 'down':

      // Check if user has already voted, determined by unique content cookie.
      if (isset($_COOKIE["voted_" . $unique_content_id])) {
        header('HTTP/1.1 500 Already Voted this Content!');
        exit();
      }

      // Get vote_up value from db using unique_content_id.
      //$result = mysqli_query($sql_con,"SELECT vote_down FROM voting_count WHERE unique_content_id='$unique_content_id' LIMIT 1");
      $criteria = array(
        'content_type' => 'drulenium_vr',
        'value_type' => 'points',
        'content_id' => $unique_content_id,
        'tag' => 'change_down',
      );
      $ret = votingapi_select_results($criteria, 1);
      $get_vote_down = 0;
      if (!empty($ret)) {
        $get_vote_down = $ret[0]['value'];
      }

      $vote = array(
        'content_type' => 'drulenium_vr',
        'value_type' => 'points',
        'content_id' => $unique_content_id,
        'value' => $get_vote_down + 1,
        'tag' => 'change_down',
      );
      $votes = array($vote);
      votingapi_set_votes($votes);

      setcookie("voted_" . $unique_content_id, 1, time() + 7200);  // set cookie that expires in 2 hour "time()+7200".
      // Display total disliked votes.
      echo ($get_vote_down + 1);
      break;

  }

  module_invoke_all('exit') & exit;
}

/**
 * Implements hook_theme().
 */
function drulenium_visual_regression_theme() {
  return array(
    'drulenium_visual_regression_compare_releases_form' => array(
      'render element' => 'form',
    ),
  );
}

/**
 * Implements hook_theme_registry_alter().
 */
function drulenium_visual_regression_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'drulenium_visual_regression');
  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

function drulenium_visual_regression_format_task_output($task_type, $output){
  switch ($task_type) {
    case TASK_GOTO_URL:
      break;
    case TASK_TAKE_SCREENSHOT:
      $snapshot_img = "<img src='" . $output . "' width=200 />";
      $output = l($snapshot_img, $output, array('attributes' => array('target' => '_blank'), 'html' => TRUE));
      break;
  }
  return $output;
}

function drulenium_visual_regression_compare_process_local($old_re_id, $new_re_id) {
  if ($new_re_id < $old_re_id) {
    $tmp = $new_re_id;
    $new_re_id = $old_re_id;
    $old_re_id = $tmp;
  }

  $batch = array(
    'operations' => array(),
    'finished' => 'drulenium_visual_regression_compare_batch_finished', // runs after batch is finished.
    'title' => t('Processing request'),
    'init_message' => t('Comparision process is starting.'),
    'progress_message' => t('Processed @current out of @total sets.'),
    'error_message' => t('Comparision has encountered an error.'),
  );
  $progress = 0; // where to start
  $limit = 1; // how many to process for each run
  $max = 1000; // how many records to process until stop - can do query here to get max times to run

  // Get unprocessed runs of specified compare
  // where snapshot is empty
  $query = db_select('eck_drulenium_visual_diff', 'diff');
  $query-> leftJoin('field_data_field_dr_diff_base_task', 'base_tsk', 'diff.id = base_tsk.entity_id');
  $query-> leftJoin('field_data_field_dr_diff_cmp_task', 'cmp_tsk', 'diff.id = cmp_tsk.entity_id');
  $query-> leftJoin('field_data_field_dr_task_release', 'base_rel', 'base_tsk.field_dr_diff_base_task_target_id = base_rel.entity_id');
  $query-> leftJoin('field_data_field_dr_task_release', 'cmp_rel', 'cmp_tsk.field_dr_diff_cmp_task_target_id = cmp_rel.entity_id');
  $query-> leftJoin('field_data_field_dr_diff_percentage', 'diff_percent', 'diff.id = diff_percent.entity_id');
  $query->fields('diff', array('id'));
  $query->condition('base_rel.field_dr_task_release_target_id', $old_re_id);
  $query->condition('cmp_rel.field_dr_task_release_target_id', $new_re_id);
  $query->isNull('diff_percent.field_dr_diff_percentage_value');
  $query->addExpression('COUNT(id)', 'run_count');
  $result = $query->execute();
  $row = $result->fetchAssoc();
  $max = $row['run_count'];

  while ($progress <= $max) {
    $batch['operations'][] = array('drulenium_visual_regression_compare_batch_op', array($old_re_id, $new_re_id, $progress, $limit));
    $progress = $progress + $limit;
  }

  batch_set($batch);

  // Pass in page to return to after complete.
  batch_process("drulenium/vr/compare/$old_re_id/$new_re_id");
}

function drulenium_visual_regression_update_result_in_drulenium_db_batch_op($old_re_id, $new_re_id, $secure_id, $progress, $limit, &$context) {
  /*
   * Get diff entities with diff percent greater than zero.
   */
  $query = db_select('eck_drulenium_visual_diff', 'diff');
  $query-> leftJoin('field_data_field_dr_diff_base_task', 'base_tsk', 'diff.id = base_tsk.entity_id');
  $query-> leftJoin('field_data_field_dr_diff_cmp_task', 'cmp_tsk', 'diff.id = cmp_tsk.entity_id');
  $query-> leftJoin('field_data_field_dr_task_release', 'base_rel', 'base_tsk.field_dr_diff_base_task_target_id = base_rel.entity_id');
  $query-> leftJoin('field_data_field_dr_task_release', 'cmp_rel', 'cmp_tsk.field_dr_diff_cmp_task_target_id = cmp_rel.entity_id');
  $query-> leftJoin('field_data_field_dr_diff_percentage', 'diff_percent', 'diff.id = diff_percent.entity_id');
  $query-> leftJoin('field_data_field_diff_file_gif', 'gif', 'diff.id = gif.entity_id');
  $query-> leftJoin('field_data_field_diff_file_highlight', 'diff_file', 'diff.id = diff_file.entity_id');
  $query->fields('diff', array('id', 'title'));
  $query->fields('diff_percent', array('field_dr_diff_percentage_value'));
  $query->fields('diff_file', array('field_diff_file_highlight_value'));
  $query->fields('gif', array('field_diff_file_gif_value'));
  $query->condition('base_rel.field_dr_task_release_target_id', $old_re_id);
  $query->condition('cmp_rel.field_dr_task_release_target_id', $new_re_id);
  $query->condition('diff_percent.field_dr_diff_percentage_value', 0, '>');
  $query->range($progress, $limit);
  $result = $query->execute();
  while ($res = $result->fetchAssoc()) {
    $diff_entity_id = $res['id'];
    $diff_entity_title = $res['title'];
    $diff_percent = $res['field_dr_diff_percentage_value'];
    $diff_file = $res['field_diff_file_highlight_value'];
    $gif_file = $res['field_diff_file_gif_value'];
    /*
     * TODO: Use imagemagick to reduce file size with lower resolution before uploading.
     */
    // Get file paths from file URL's
    $diff_file_path_rel = substr($diff_file, strlen($GLOBALS['base_url'])+1);
    $diff_file_path_abs = drupal_realpath($diff_file_path_rel);
    $gif_file_path_rel = substr($gif_file, strlen($GLOBALS['base_url'])+1);
    $gif_file_path_abs = drupal_realpath($gif_file_path_rel);

    //will call all modules implementing hook_drulenium_upload_file
    $diff_file_url_array = module_invoke_all("drulenium_upload_difference_file", $diff_file_path_abs);
    //Get the first result
    $diff_file_url = isset($diff_file_url_array[0]) ? $diff_file_url_array[0] : '';
    $gif_file_url_array = module_invoke_all("drulenium_upload_difference_file", $gif_file_path_abs);
    //Get the first result
    $gif_file_url = isset($gif_file_url_array[0]) ? $gif_file_url_array[0] : '';

    $rpc_result = xmlrpc('http://drulenium.org/xmlrpc.php', array(
      'drulenium.api_update_result' => array($secure_id, $diff_entity_title, $diff_percent, $diff_file_url, $gif_file_url),
    ));
    drupal_set_message($rpc_result);
  }

  // Update progress for message.
  $progress = $progress + $limit;
  // update message during each run so you know where you are in the process
  $context['message'] = 'Now processing Upload process: ' . $progress;
}

// this is what runs multiple times per batch
// progress and limit are updated during each run
function drulenium_visual_regression_compare_batch_op($old_re_id, $new_re_id, $progress, $limit, &$context) {
  /*
   * Get diff entities with null diff_percent
   */
  $query = db_select('eck_drulenium_visual_diff', 'diff');
  $query-> leftJoin('field_data_field_dr_diff_base_task', 'base_tsk', 'diff.id = base_tsk.entity_id');
  $query-> leftJoin('field_data_field_dr_diff_cmp_task', 'cmp_tsk', 'diff.id = cmp_tsk.entity_id');
  $query-> leftJoin('field_data_field_dr_task_output', 'base_tsk_snap', 'base_tsk.field_dr_diff_base_task_target_id = base_tsk_snap.entity_id');
  $query-> leftJoin('field_data_field_dr_task_output', 'cmp_tsk_snap', 'cmp_tsk.field_dr_diff_cmp_task_target_id = cmp_tsk_snap.entity_id');
  $query-> leftJoin('field_data_field_dr_task_release', 'base_rel', 'base_tsk.field_dr_diff_base_task_target_id = base_rel.entity_id');
  $query-> leftJoin('field_data_field_dr_task_release', 'cmp_rel', 'cmp_tsk.field_dr_diff_cmp_task_target_id = cmp_rel.entity_id');
  $query-> leftJoin('field_data_field_dr_diff_percentage', 'diff_percent', 'diff.id = diff_percent.entity_id');
  $query->fields('diff', array('id'));
  $query->addField('base_tsk_snap', 'field_dr_task_output_value', 'base_snapshot');
  $query->addField('cmp_tsk_snap', 'field_dr_task_output_value', 'cmp_snapshot');
  $query->condition('base_rel.field_dr_task_release_target_id', $old_re_id);
  $query->condition('cmp_rel.field_dr_task_release_target_id', $new_re_id);
  $query->isNull('diff_percent.field_dr_diff_percentage_value');
  $query->range(0, $limit);
  $result = $query->execute();
  $image_magick_path = variable_get('drulenium_vr_release_imagemagick_path', "/opt/local/bin");

  while ($res = $result->fetchAssoc()) {
    $diff_entity_id = $res['id'];
    //have to use proc_open http://cgit.drupalcode.org/imagemagick/tree/imagemagick.module#n478
    $image1 = $res['base_snapshot'];
    $image2 = $res['cmp_snapshot'];
    $image1 = str_replace(file_create_url(file_default_scheme() . '://'), drupal_realpath(file_default_scheme() . '://') . "/", $image1);
    $image2 = str_replace(file_create_url(file_default_scheme() . '://'), drupal_realpath(file_default_scheme() . '://') . "/", $image2);
    $m = array();
    if (!_drulenium_vr_open_images($image1, $image2, $m)) {
      // Error opening images, no use to continue...
      continue;
    }

    $maxheight = max($m['height1'], $m['height2']);
    $maxwidth = max($m['width1'], $m['width2']);
    if ($m['height1'] != $m['height2'] || $m['width1'] != $m['width2']) {
      // Add some padding to the smaller image to make them equal in size.
      $tempfile = tempnam("/tmp", "FOO") . '.png';
      $command = "convert $image1 -resize ${maxwidth}x${maxheight}\>  -size ${maxwidth}x${maxheight} xc:blue +swap -gravity North  -composite $tempfile";
      $exec_error = exec($command);
      if (!empty($exec_error)) {
        watchdog("drulenium", $exec_error . " -> $command");
      }
      $m['im1'] = imagecreatefrompng($tempfile);
      $m['im1name'] = $tempfile;
      $image1 = $tempfile;

      $tempfile = tempnam("/tmp", "FOO") . '.png';
      $command = "convert $image2 -resize ${maxwidth}x${maxheight}\>  -size ${maxwidth}x${maxheight} xc:blue +swap -gravity North  -composite $tempfile";
      $exec_error = exec($command);
      if (!empty($exec_error)) {
        watchdog("drulenium", $exec_error . " -> $command");
      }
      $m['im2'] = imagecreatefrompng($tempfile);
      $m['im2name'] = $tempfile;
      $image2 = $tempfile;
    }

    $diff = _drulenium_vr_image_compare($m, 5, 5, 5, 1, 5);

    if (!isset($diff['PercentDifference'])) {
      $diff_percent = 0;
    }
    else {
      $diff_percent = $diff['PercentDifference'];
    }

    $gif_link = "";
    $highlighted_link = '';
    $github_username = variable_get('github_username', '');
    $github_password = variable_get('github_password', '');
    $github_repo = variable_get('github_repo', '');
    $github_email = variable_get('github_email', '');
    if($diff_percent > 0 && (variable_get('drulenium_vr_config_image_server_opt', 'drulenium') == 'github')) {
      if (($library = libraries_load("php-github-api")) && !empty($library['loaded'])) {
        $client = new \Github\Client();
        $client->authenticate($github_username, $github_password, Github\Client::AUTH_HTTP_PASSWORD);
        $image1_data = file_get_contents($image1);
        // dsm image data doesn't print for some reason but the data is there in the variable.
        $image2_data = file_get_contents($image2);

        $committer = array('name' => $github_username, 'email' => $github_email);
        //$committer = array();
        $branch = "master";
        // Release names in folder name, URL in file name
        // If step_num > 0 URL as folder name
        // URL in commit message
        /*$base_release_name = db_select('drulenium_vr_releases', 'vr_re')
          ->fields('vr_re', array('name'))
          ->condition('vr_re.rid', $old_re_id)
          ->execute()->fetchfield();
        $cmp_release_name = db_select('drulenium_vr_releases', 'vr_re')
        ->fields('vr_re', array('name'))
        ->condition('vr_re.rid', $new_re_id)
        ->execute()->fetchfield();*/
        $path = "Diff/{$diff_entity_id}.png";
        $commitMessage = "Base version -> id: {$diff_entity_id}";
        $fileExists = $client->api('repo')->contents()->exists($github_username, $github_repo, $path, $reference = null);
        if(!$fileExists){
          // File doesn't exist, create new
          $fileInfo = $client->api('repo')->contents()->create($github_username, $github_repo, $path, $content = $image1_data, $commitMessage, $branch, $committer);
        }else{
          // File already exists, update existing
          $oldFile = $client->api('repo')->contents()->show($github_username, $github_repo, $path, $branch);
          $fileInfo = $client->api('repo')->contents()->update($github_username, $github_repo, $path, $content = $image1_data, $commitMessage, $oldFile['sha'], $branch, $committer);
        }
        $commitMessage = "Comparision version -> id: {$diff_entity_id}";
        $firstFile = $client->api('repo')->contents()->show($github_username, $github_repo, $path, $branch);
        $fileInfo2 = $client->api('repo')->contents()->update($github_username, $github_repo, $path, $content = $image2_data, $commitMessage, $firstFile['sha'], $branch, $committer);
        $commit_sha = $fileInfo2['commit']['sha'];
        $highlighted_link = "https://github.com/{$github_username}/{$github_repo}/commit/$commit_sha";
      }
    } else {
      // Try to get ImageMagick "convert" program version number.
      exec("$image_magick_path/convert -version", $out, $image_magick_code);
      // $image_magick_code = 0 if OK, nonzero if error.
      if ($diff_percent > 0 && $image_magick_code == 0) {
        // Generate animated GIF.
        $unique_id = "drulenium/gif_" . microtime(TRUE) . ".gif";
        $gif_path = drupal_realpath(file_default_scheme() . '://') . "/" . $unique_id;
        $gif_link = file_create_url(file_default_scheme() . '://') . $unique_id;
        //dsm("$image_magick_path/convert -delay 50 $image1 $image2 -loop 0 $gif_path");
        $command = "$image_magick_path/convert -delay 50 $image1 $image2 -loop 0 $gif_path 2>&1";
        $exec_error = exec($command);
        if (!empty($exec_error)) {
          $gif_link = "";
          watchdog("drulenium", $exec_error . " -> $command");
        }
      }
      //$diff_percent = sprintf("%.3f",($output/(400*300))*100);
      if ($diff_percent > 0 && $image_magick_code == 0) {
        // Generate highlighted image.
        $unique_id = "drulenium/highlight_" . microtime(TRUE) . ".png";
        $highlighted_path = drupal_realpath(file_default_scheme() . '://') . "/" . $unique_id;
        $highlighted_link = file_create_url(file_default_scheme() . '://') . $unique_id;
        //dsm("$image_magick_path/compare $image1 $image2 -compose src $highlighted_path");
        $command = "$image_magick_path/compare $image1 $image2 $highlighted_path 2>&1";
        $exec_error = exec($command);
        if(!empty($exec_error)) {
          $highlighted_link = "";
          watchdog("drulenium", $exec_error . " -> $command");
        }
      }
    }

    $diff_items = entity_load('drulenium_visual_diff', array($diff_entity_id));
    $diff_entity = array_pop($diff_items);
    $diff_entity_wrapper = entity_metadata_wrapper('drulenium_visual_diff', $diff_entity);
    $diff_entity_wrapper->field_dr_diff_percentage = $diff_percent;
    $diff_entity_wrapper->field_diff_file_highlight = $highlighted_link;
    $diff_entity_wrapper->field_diff_file_gif = $gif_link;
    $diff_entity_wrapper->changed = REQUEST_TIME;
    $diff_entity_wrapper->save();

    /*db_query("Update drulenium_vr_results res
      LEFT JOIN drulenium_vr_runs run on res.run_base_id = run.rid
      LEFT JOIN drulenium_vr_releases rel on run.re_id = rel.rid
      SET  diff_percent = :diff_percent, diff_highlight = :diff_highlight, diff_gif = :diff_gif
      WHERE res.rid = :res_id",
      array(':res_id' => $res['rid'], ':diff_percent' => $diff_percent, ':diff_highlight' => $highlighted_link, ':diff_gif' => $gif_link));
*/

  }
  // Update progress for message.
  $progress = $progress + $limit;
  // update message during each run so you know where you are in the process
  $context['message'] = 'Now processing compare: ' . $progress;
}

/**
 * Batch 'finished' callback used by Compare batch.
 */
function drulenium_visual_regression_compare_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message('Comparision process is completed.');
  }
  else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE)
    ));
    drupal_set_message($message, 'error');
  }
}

/**
 * Batch 'finished' callback used by Compare batch.
 */
function drulenium_visual_regression_update_result_in_drulenium_db_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message('Upload process is completed.');
  }
  else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE)
    ));
    drupal_set_message($message, 'error');
  }
}

function drulenium_visual_regression_compare_status($base_release_secure_id, $cmp_release_secure_id) {
  // RPC call
  $result = xmlrpc('http://drulenium.org/xmlrpc.php', array(
      'drulenium.api_compare_status' => array($base_release_secure_id, $cmp_release_secure_id),
  ));
  //dsm($result);
  foreach ($result as $cmp_res){
    // To support certain encoded characters like french, spanish...
    //TODO: There are some known issues with arabic characters
    $cmp_res['url'] = utf8_encode($cmp_res['url']);

    $diff_percent = $cmp_res['diff_percent'];
    if($diff_percent == "isNULL"){
      $diff_percent = NULL;
    }
    //$relative_url = substr($cmp_res['url'], strpos($cmp_res['url'], "?q=")+3);
    $gif_link = "";
    if(!empty($cmp_res['diff_gif'])){
      $gif_link = "http://drulenium.org/".$cmp_res['diff_gif'];
    }
    $highlighted_link = "";
    if(!empty($cmp_res['diff_highlight'])){
      $highlighted_link = "http://drulenium.org/".$cmp_res['diff_highlight'];
    }
    $result = db_query("Update drulenium_vr_results res
    LEFT JOIN drulenium_vr_runs run on res.run_base_id = run.rid
    LEFT JOIN drulenium_vr_releases rel on run.re_id = rel.rid
    SET  diff_percent = :diff_percent, diff_highlight = :diff_highlight, diff_gif = :diff_gif
    where run.url = :url AND (rel.secure_id = :base_rel_secure_id OR rel.secure_id = :cmp_release_secure_id)",
    array(':url' => $cmp_res['url'], ':base_rel_secure_id' => $base_release_secure_id, ':cmp_release_secure_id' => $cmp_release_secure_id, ':diff_percent' => $diff_percent, ':diff_highlight' => $highlighted_link, ':diff_gif' => $gif_link));
  }
  $query = db_select('drulenium_vr_releases', 'vr_re');
  $base_release_id = $query
    ->fields('vr_re', array('rid'))
    ->condition('vr_re.secure_id', $base_release_secure_id)
    ->execute()->fetchfield();

  $query = db_select('drulenium_vr_releases', 'vr_re');
  $cmp_release_id = $query
    ->fields('vr_re', array('rid'))
    ->condition('vr_re.secure_id', $cmp_release_secure_id)
    ->execute()->fetchfield();
  variable_set("drulenium_vr_last_check_{$base_release_id}_{$cmp_release_id}", time());
  drupal_goto("drulenium/vr/compare/$base_release_id/$cmp_release_id");
}

function drulenium_visual_regression_release_process_local($re_id) {

  drulenium_visual_regression_release_setup_batch($re_id);

  // Start processing, pass the page to return to after completing.
  batch_process("drulenium/vr/release/" . $re_id);
}

/**
 * Setup the Batch API for a release.
 */
function drulenium_visual_regression_release_setup_batch($re_id) {
  //_drulenium_visual_regression_webdriver_navigate("http://docs.seleniumhq.org/");
  //return "test";
  $batch = array(
    'operations' => array(),
    'finished' => 'drulenium_visual_regression_release_batch_finished', // runs after batch is finished
    'title' => t('Processing request'),
    'init_message' => t('Screenshot process is starting.'),
    'progress_message' => t('Processed @current out of @total sets.'),
    'error_message' => t('Import has encountered an error.'),
  );
  $progress = 0; // where to start
  $batch_limit = 3; // how many to process for each run
  $max = 1000; // how many records to process until stop - can do query here to get max times to run

  //get unprocessed runs of specified release
  //where snapshot is empty
  $result = db_select('drulenium', 're')
    ->fields('re', array('secure_id','title', 'base_url'))
    ->condition('re.drulenium_id', $re_id)
    ->execute();
  /*$query = db_select('drulenium_vr_releases', 'vr_re');
  $result = $query
    ->fields('vr_re', array('secure_id','name', 'base_url'))
    ->condition('vr_re.rid', $re_id)
    ->execute();*/
  $release = $result->fetchAssoc();
  $secure_id = $release['secure_id'];
  $test_base_url = $release['base_url'];

  $query = new EntityFieldQuery();

  /*$query->entityCondition('entity_type', 'drulenium_test_task')
    ->fieldCondition('field_dr_task_release', 'target_id', $re_id, '=')
    ->addTag('dr_pending_tasks');
  $result = $query->execute();
  if (isset($result['drulenium_test_task'])) {
    $max = count($result['drulenium_test_task']);
  }*/
  /*
   * Limit array
   * Get ids of all go to url tasks
   * max is the last go to url task ID
   */
  $query->entityCondition('entity_type', 'drulenium_test_task')
    ->fieldCondition('field_dr_task_release', 'target_id', $re_id, '=')
    ->entityCondition('bundle', 'goto_task')
    ->addTag('dr_pending_tasks');
  $result = $query->execute();
  $goto_tasks_items_ids = array();
  if (isset($result['drulenium_test_task'])) {
    $goto_tasks_items_ids = array_keys($result['drulenium_test_task']);
  }
  /*$query = db_select('drulenium_vr_runs', 'ru')
    ->fields('ru')
    ->condition('re_id', $re_id, '=')
    ->condition('snapshot', '', '=');
  $query->addExpression('COUNT(rid)', 'run_count');
  $result = $query->execute();
  $run = $result->fetchAssoc();
  $max = $run['run_count'];*/

  //while($progress <= $max) {
  foreach ($goto_tasks_items_ids as $key => $goto_task_item_id) {
    if($key % $batch_limit == 0) {
      $progress_task_id = $goto_task_item_id;
      $limit_task_id = isset($goto_tasks_items_ids[$key + $batch_limit]) ? $goto_tasks_items_ids[$key + $batch_limit] : 0;
      if ((variable_get('drulenium_vr_config_server_opt', 'drulenium') == 'local') || (variable_get('drulenium_vr_config_server_opt', 'drulenium') == 'browserstack')) {
        $batch['operations'][] = array(
          'drulenium_visual_regression_release_batch_op',
          array($test_base_url, $re_id, $progress_task_id, $limit_task_id)
        );
      }
      //$progress = $progress + $limit;
    }
  }
  batch_set($batch);
}

/**
 * Batch 'finished' callback used by both batch 1 and batch 2.
 */
function drulenium_visual_regression_release_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message('Snapshot process is completed.');
  }
  else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE)
    ));
    drupal_set_message($message, 'error');
  }
}

// this is what runs multiple times per batch
// progress and limit and is updated during each run
function drulenium_visual_regression_release_batch_op($test_base_url, $re_id, $progress_task_id, $limit_task_id, &$context) {
  if (($library = libraries_load("selenium_webdriver")) && !empty($library['loaded'])) {
    // Getting username, password & base url from release.
    $release_result = db_select('drulenium', 're')
      ->fields('re', array('base_url', 'settings'))
      ->condition('drulenium_id', $re_id, '=')
      ->execute()
      ->fetchAssoc();
    $release_settings_encoded = $release_result['settings'];
    $release_settings = drupal_json_decode($release_settings_encoded);
    $test_user_name = $release_settings['user_name'];
    $test_user_pass = $release_settings['user_pass'];
    /*$release_result = db_select('drulenium_vr_releases', 're')
      ->fields('re')
      ->condition('rid', $re_id, '=')
      ->execute()
      ->fetchAssoc();
    $preset_cid = $release_result['preset_cid'];
    $release_settings = $release_result['settings'];
    $release_settings_arr = drupal_json_decode($release_settings);
    $plugins_list = isset($release_settings_arr["plugins_list"]) ? $release_settings_arr["plugins_list"] : array();
*/
    /*
     * Get all tasks corresponding to this release
     */
    $query = new EntityFieldQuery();

    /*
     * get all pending tasks starting from go to URL type task & ending with go to URL task
     */
    $query->entityCondition('entity_type', 'drulenium_test_task')
      ->fieldCondition('field_dr_task_release', 'target_id', $re_id, '=')
      ->entityCondition('entity_id', $progress_task_id, ">=");
    if (!empty($limit_task_id)) {
      $query->entityCondition('entity_id', $limit_task_id, "<");
    }
    $query->addTag('dr_pending_tasks');
    $result = $query->execute();
    if (isset($result['drulenium_test_task'])) {
      $tasks_items_ids = array_keys($result['drulenium_test_task']);
      $tasks_items = entity_load('drulenium_test_task', $tasks_items_ids);
    }
    /*$result = db_select('drulenium_vr_runs', 'ru')
      ->fields('ru')
      ->condition('re_id', $re_id, '=')
      ->condition('snapshot', '', '=')
      ->range(0, $limit)
      ->execute();*/

    // Start Firefox with 5 second timeout.
    if (variable_get('drulenium_vr_config_server_opt', 'drulenium') == 'local') {
      $host = variable_get('drulenium_vr_release_selenium_host', "http://localhost:4444/wd/hub"); // this is the default
      $browser = variable_get('drulenium_vr_release_selenium_browser', 'firefox');
      $capabilities = DesiredCapabilities::$browser();
    }
    elseif (variable_get('drulenium_vr_config_server_opt', 'drulenium') == 'browserstack') {
      $browser_stack_username = variable_get('browserstack_username', "");
      $browser_stack_access_key = variable_get('browserstack_access_key', "");
      $host = "http://{$browser_stack_username}:{$browser_stack_access_key}@hub.browserstack.com/wd/hub";

      $browserstack_browser_platform = variable_get('drulenium_vr_browserstack_os', '');
      $browserstack_browser_platform_os_version_seperator_index = strpos($browserstack_browser_platform, " -> ");
      $browserstack_browser_platform_os = substr($browserstack_browser_platform, 0, $browserstack_browser_platform_os_version_seperator_index);
      $browserstack_browser_platform_os_version = substr($browserstack_browser_platform, $browserstack_browser_platform_os_version_seperator_index + 4);
      $browserstack_browser_platform_id = drulenium_visual_regression_name_to_id($browserstack_browser_platform);
      $browserstack_browser_name = variable_get('drulenium_vr_browserstack_browser_' . $browserstack_browser_platform_id, '');
      $browserstack_browser_name_id = drulenium_visual_regression_name_to_id($browserstack_browser_name);
      $browserstack_browser_version = variable_get('drulenium_vr_browserstack_browser_version_' . "{$browserstack_browser_platform_id}_{$browserstack_browser_name_id}", '');

      $capabilities = array(
        "browser" => $browserstack_browser_name,
        "browser_version" => $browserstack_browser_version,
        "os" => $browserstack_browser_platform_os,
        "os_version" => $browserstack_browser_platform_os_version,
        "browserstack.debug" => variable_get('browserstack_debugging', 'false'),
      );
    }
    $driver = RemoteWebDriver::create($host, $capabilities, 5000);
    $driver->manage()->window()->maximize();

    // Logging in as specified user
    if (!empty($test_user_name) && !empty($test_user_pass)) {
      $driver->get($release_result['base_url'] . "user/login");
      $driver->findElement(WebDriverBy::id("edit-name"))
        ->sendKeys($test_user_name);
      $driver->findElement(WebDriverBy::id("edit-pass"))
        ->sendKeys($test_user_pass);
      $userSubmitElement = $driver->findElement(WebDriverBy::id('edit-submit'));
      $userSubmitElement->click();
    }

    foreach ($tasks_items as $task_entity) {
      drulenium_visual_regression_selenium_tasks_do($driver, $task_entity, $test_base_url);
    }
    // Close the Firefox.
    $driver->quit();
    // update progress for message
    //$progress = $progress + $limit;
    // update message during each run so you know where you are in the process
    // Get last task name
    $context['message'] = 'Processing';
    if (!empty($limit_task_id)) {
      $last_tasks_items = entity_load('drulenium_test_task', array($limit_task_id));
      $last_tasks_item = array_pop($last_tasks_items);
      $context['message'] = 'Now processing task -> ' . $last_tasks_item->title;
    }
  } else {
    drupal_set_message('Didn\'t find the required selenium_webdriver library. Follow the installation instructions at <a target="_blank" href="http://drulenium.org/installation">http://drulenium.org/installation</a> ');
  }
}

/**
 * Implements hook_query_TAG_alter()
 */
function drulenium_visual_regression_query_dr_pending_tasks_alter(QueryAlterableInterface $query) {
  // TODO: get rid of the zero suffix on field_data_field_dr_task_release0
  // https://www.drupal.org/node/1157006#comment-5465034
  $query->leftJoin('field_data_field_dr_task_status', 'o', 'field_data_field_dr_task_release0.entity_id = o.entity_id');
  $query->isNull('o.field_dr_task_status_value');
}

function drulenium_visual_regression_selenium_tasks_do($driver, $task_entity, $test_base_url) {
  $output = "";
  $task_entity_wrapper = entity_metadata_wrapper('drulenium_test_task', $task_entity);
  $plugin_type = $task_entity->type;
  $plugin_arr_encoded = $task_entity_wrapper->field_dr_task_settings->value();
  $plugin_arr = drupal_json_decode($plugin_arr_encoded);
  switch ($plugin_type) {
    case TASK_GOTO_URL:
      $output .= drulenium_visual_regression_selenium_task_goto_url_do($driver, $task_entity_wrapper, $plugin_arr, $test_base_url);
      break;
    case TASK_FILL_TEXTBOX:
      $output .= drulenium_visual_regression_selenium_task_fill_textbox_do($driver, $plugin_arr);
      break;
    case TASK_CLICK_BUTTON:
      $output .= drulenium_visual_regression_selenium_task_click_button_do($driver, $plugin_arr);
      break;
    case TASK_HOVER_OVER:
      $output .= drulenium_visual_regression_selenium_task_mouse_hover_do($driver, $plugin_arr);
      break;
    case TASK_WAIT:
      $output .= drulenium_visual_regression_selenium_task_wait_do($driver, $plugin_arr);
      break;
    case TASK_VERIFY_TEXT:
      $output .= drulenium_visual_regression_selenium_task_verify_text_do($driver, $plugin_arr);
      break;
    case TASK_TAKE_SCREENSHOT:
      $output .= drulenium_visual_regression_selenium_task_take_screenshot_do($driver, $task_entity_wrapper, $plugin_arr);
      break;
  }
  return $output;
}

function drulenium_visual_regression_selenium_task_verify_text_do($driver, $plugin_arr, $saucelabs = FALSE, $result_entity = NULL) {
  $element_locator_type = $plugin_arr['description']['locator_type'];
  $element_locator = $plugin_arr['description']['locator'];
  $value = $plugin_arr['description']['text'];
  if($saucelabs) {
    $output = '';
    return $output;
  }
  $element = drulenium_visual_regression_selenium_find_element($driver, $element_locator, $element_locator_type);
  $page_element_text = $element->getText();
  if (strpos($page_element_text, $value) !== false) {
    // Text present
  }else{
    // Test failed.
    $result_entity->status = 0;
  }
}

function drulenium_visual_regression_selenium_task_goto_url_do($driver, $task_wrapper, $plugin_arr, $test_base_url) {
  $url = $test_base_url . $plugin_arr['description']['url'];
  try{
    $driver->get($url);
    $task_wrapper->field_dr_task_status = 1;
  }catch(Exception $e) {
    $task_wrapper->field_dr_task_status = 0;
  }
  $task_wrapper->changed = REQUEST_TIME;
  $task_wrapper->save();
}

function drulenium_visual_regression_selenium_task_fill_textbox_do($driver, $plugin_arr, $saucelabs = FALSE) {
  $element_locator_type = $plugin_arr['description']['locator_type'];
  $element_locator = $plugin_arr['description']['locator'];
  $value = $plugin_arr['description']['text'];
  if($saucelabs) {
    $output = '
        $this->byCss("'.$element_locator.'")->value("'.$value.'");
    ';
    return $output;
  }
  $element = drulenium_visual_regression_selenium_find_element($driver, $element_locator, $element_locator_type);
  $element->sendKeys($value);
}

function drulenium_visual_regression_selenium_task_wait_do($driver, $plugin_arr, $saucelabs = FALSE) {
  // https://github.com/facebook/php-webdriver/wiki/HowTo-Wait
  // http://facebook.github.io/php-webdriver/classes/WebDriverExpectedCondition.html#method_visibilityOfElementLocated
  $element_css_locator = $plugin_arr['description']['locator'];
  $time_seconds = $plugin_arr['description']['seconds'];
  if ($saucelabs) {
    $output = '';
    return $output;
  }
  // wait for at most 10s for the specified Element to be present on the DOM of a page and visible.
  // sleep for 500ms and retries if it the title is not correct.
  if (!empty($element_css_locator)) {
    $driver->wait($time_seconds, 500)->until(
      WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::cssSelector($element_css_locator))
    );
  }else{
    //Look for a non-existing element, timeout after specified time. Error will be thrown & caught as element doesn't exist.
    try{
      $driver->wait($time_seconds, 500)->until(
        WebDriverExpectedCondition::visibilityOfElementLocated(WebDriverBy::cssSelector("#non-existing-element-id"))
      );
    }catch(Exception $e) {
    }
  }
}

function drulenium_visual_regression_selenium_task_mouse_hover_do($driver, $plugin_arr, $saucelabs = FALSE) {
  // https://github.com/facebook/php-webdriver/wiki/Example-command-reference
  $element_locator_type = $plugin_arr['description']['locator_type'];
  $element_locator = $plugin_arr['description']['locator'];
  if($saucelabs) {
    $output = '';
    return $output;
  }
  $element = drulenium_visual_regression_selenium_find_element($driver, $element_locator, $element_locator_type);
  $driver->getMouse()->mouseMove( $element->getCoordinates() );
}

function drulenium_visual_regression_selenium_find_element($driver, $element_locator, $element_locator_type = "css") {
  $element = null;
  switch ($element_locator_type) {
    case 'id':
      $element = $driver->findElement(WebDriverBy::id($element_locator));
      break;
    case 'name':
      $element = $driver->findElement(WebDriverBy::name($element_locator));
      break;
    case 'css':
      $element = $driver->findElement(WebDriverBy::cssSelector($element_locator));
      break;
    case 'xpath':
      $element = $driver->findElement(WebDriverBy::xpath($element_locator));
      break;
  }
  return $element;
}

function drulenium_visual_regression_selenium_task_click_button_do($driver, $plugin_arr, $saucelabs = FALSE) {
  $element_locator_type = $plugin_arr['description']['locator_type'];
  $element_locator = $plugin_arr['description']['locator'];
  if($saucelabs) {
    $output = '
        $this->byCss("'.$element_locator.'")->click();
    ';
    return $output;
  }
  $element = drulenium_visual_regression_selenium_find_element($driver, $element_locator, $element_locator_type);
  $element->click();
}

function drulenium_visual_regression_selenium_task_take_screenshot_do($driver, $task_entity_wrapper, $plugin_arr) {
  $element_locator_type = $plugin_arr['description']['locator_type'];
  $element_locator = $plugin_arr['description']['locator'];
  $snapshot_mode = $plugin_arr['description']['snapshot_mode'];
  $width = $plugin_arr['description']['width'];
  $height = $plugin_arr['description']['height'];
  $offset_width = $plugin_arr['description']['offset_width'];
  $offset_height = $plugin_arr['description']['offset_height'];
  $exclude_element = FALSE;

  if ($snapshot_mode == "exclude") {
    $exclude_element = TRUE;
  }
  try{
    $full_screenshot = _drulenium_visual_regression_TakeScreenshot($driver, $element_locator, $exclude_element, $width, $height, $offset_width, $offset_height, $element_locator_type);
    $task_entity_wrapper->field_dr_task_output = $full_screenshot;
    $task_entity_wrapper->field_dr_task_status = 1;
  }catch(Exception $e) {
    $task_entity_wrapper->field_dr_task_status = 0;
  }
  $task_entity_wrapper->changed = REQUEST_TIME;
  $task_entity_wrapper->save();
  /*$fields = array(
      're_id' => $re_id,
      'snapshot' => $full_screenshot,
      'url' => $page_url,
      'step_num' => $step_num,
  );
  db_insert('drulenium_vr_runs')->fields($fields)->execute();*/
}

function drulenium_visual_regression_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  dsm($entity);
}

function _drulenium_visual_regression_TakeScreenshot($driver, $element_locator = '', $exclude_element = FALSE, $element_width = 0, $element_height = 0, $offset_width = 0, $offset_height = 0, $element_locator_type = "css") {
  // Change the Path to your own settings.
  $mydir = file_default_scheme() . '://drulenium';
  file_prepare_directory($mydir, FILE_CREATE_DIRECTORY);
  $unique_id = "drulenium/" . microtime(TRUE) . ".png";
  $screenshot = drupal_realpath(file_default_scheme() . '://') . "/" . $unique_id;
  $relative_file_path = file_create_url(file_default_scheme() . '://').$unique_id;

  // Change the driver instance
  $driver->takeScreenshot($screenshot);
  if(!file_exists($screenshot)){
    throw new Exception('Could not save screenshot');
  }

  if(empty($element_locator)){
    return $relative_file_path;
  }
  $multiple_elements = explode(",", $element_locator);

  // Continue to crop out a specific element.

  $screenshot = drupal_realpath(file_default_scheme() . '://') . "/" . $unique_id; // Change the path here as well

  //dsm($relative_file_path);

  // Create image instances
  $src = imagecreatefrompng($screenshot);
  if($exclude_element) {
    $red = imagecolorallocate($src, 255, 0, 0);
    foreach ($multiple_elements as $single_element_locator){
      $element = drulenium_visual_regression_selenium_find_element($driver, $single_element_locator, $element_locator_type);
      if($element_width == 0){
        $element_width = $element->getSize()->getWidth() + $offset_width;
      }
      if($element_height == 0){
        $element_height = $element->getSize()->getHeight() + $offset_height;
      }

      $element_src_x = $element->getLocation()->getX();
      $element_src_y = $element->getLocation()->getY();
      // Draw a red rectangle
      imagefilledrectangle($src, $element_src_x, $element_src_y, $element_src_x + $element_width, $element_src_y + $element_height, $red);
    }
    imagepng($src, $screenshot);
  } else {
    // If include element, include the first element.
    $element = drulenium_visual_regression_selenium_find_element($driver, $multiple_elements[0], $element_locator_type);
    if($element_width == 0){
      $element_width = $element->getSize()->getWidth() + $offset_width;
    }
    if($element_height == 0){
      $element_height = $element->getSize()->getHeight() + $offset_height;
    }

    $element_src_x = $element->getLocation()->getX();
    $element_src_y = $element->getLocation()->getY();
    $dest = imagecreatetruecolor($element_width, $element_height);

    // Copy
    imagecopy($dest, $src, 0, 0, $element_src_x, $element_src_y, $element_width, $element_height);

    imagepng($dest, $screenshot);
  }

  // unlink($screenshot); // unlink function might be restricted in mac os x.

  if(!file_exists($screenshot)){
    throw new Exception('Could not save element screenshot');
  }

  return $relative_file_path;
}

function drulenium_visual_regression_release_status($secureid) {
  // RPC call
  $result = xmlrpc('http://drulenium.org/xmlrpc.php', array(
      'drulenium.api_release_status' => array($secureid),
  ));
  //dsm($result);
  $re_id = $result[0]['re_id'];
  foreach ($result as $run){
    //$relative_url = substr($run['url'], strpos($run['url'], "?q=")+3);
    db_update('drulenium_vr_runs')
    ->fields(array(
      'snapshot' => 'http://drulenium.org/'.$run['snapshot'],
    ))
    ->condition('re_id', $re_id)
    ->condition('url', $run['url'])
    ->execute();
  }
  variable_set('drulenium_vr_last_check'.$re_id, time());
  drupal_goto("drulenium/vr/release/".$re_id);
}

function drulenium_visual_regression_release_delete_form($form, &$form_state, $re_id) {
  //dsm($re_id);
  $form['re_id'] = array(
    '#type' => 'value',
    '#value' => $re_id,
  );
  return confirm_form($form, t('Are you sure you want to delete the release with id %title ?', array('%title' => $re_id)), 'drulenium/vr', t('This action cannot be undone.'), t('Delete'), t('Cancel'));
}

function drulenium_visual_regression_release_delete_form_submit($form, &$form_state) {
  //dsm($form);
  $re_id = $form['re_id']['#value'];

  // Delete entry in drulenium_vr_releases.
  db_delete('drulenium_vr_releases')
    ->condition('rid', $re_id)
    ->execute();

  // Delete entries in drulenium_vr_results.
  db_query("DELETE res FROM drulenium_vr_results res left join drulenium_vr_runs run on res.run_base_id = run.rid WHERE run.re_id = :re_id", array(':re_id' => $re_id));
  db_query("DELETE res FROM drulenium_vr_results res left join drulenium_vr_runs run on res.run_cmp_id = run.rid WHERE run.re_id = :re_id", array(':re_id' => $re_id));

  // Delete entries in drulenium_vr_runs.
  db_delete('drulenium_vr_runs')
    ->condition('re_id', $re_id)
    ->execute();

  // Delete snapshots and other image files related to this release.
  // TODO delete the image files.

  drupal_set_message("Deleted the release with id:$re_id");
  drupal_goto('drulenium/vr');
}

function drulenium_visual_regression_release_detail($re_id) {
  // If Local, check if there is anything pending.
  variable_get('drulenium_vr_config_server_opt', 'drulenium');

  $result = db_select('drulenium', 're')
    ->fields('re', array('title', 'secure_id'))
    ->condition('re.drulenium_id', $re_id)
    ->execute();
  /*$query = db_select('drulenium_vr_releases', 'vr_re');
  $result = $query
    ->fields('vr_re', array('secure_id','name', 'base_url'))
    ->condition('vr_re.rid', $re_id)
    ->execute();*/
  $release = $result->fetchAssoc();
  $secure_id = $release['secure_id'];
  //$test_base_url = $release['base_url'];
  drupal_set_title("Release: " . $release['title']);

  $last = variable_get("drulenium_vr_last_check" . $re_id);
  $output = '<div class="update checked">';
  if(variable_get('drulenium_vr_config_server_opt', 'drulenium') == 'local'){
    $output .= ' <span class="process-locally">(' . l(t('Process locally'), 'drulenium/vr/release/process-local/' . $re_id) . ')</span>';
  }elseif(variable_get('drulenium_vr_config_server_opt', 'drulenium') == 'saucelabs'){
    $output .= ' <span class="process-locally">(' . l(t('Process using Sauce Labs'), 'drulenium/vr/release/process-saucelabs/' . $re_id) . ')</span>';
  }
  else {
    $output .= $last ? t('Last checked: @time ago', array('@time' => format_interval(REQUEST_TIME - $last))) : t('Last checked: never');
    $output .= ' <span class="check-manually">(' . l(t('Check manually'), 'drulenium/vr/release/status/' . $secure_id) . ')</span>';
  }
  $output .= "</div>\n";
  /*$header = array(t('Id'), t('URL'), t('Task'), t('Snapshot'));
  $rows = array();
  $result = db_select('drulenium_vr_runs', 'ru')
    ->fields('ru')
    ->condition('re_id', $re_id,'=')
    ->orderBy('url', 'ASC')
    ->execute();

  while($run = $result->fetchAssoc()) {
    $snapshot = "";
    $url_text = $run['url'];
    if(empty($run['url'])){
      $url_text = "Home Page";
    }
    if(!empty($run['snapshot'])){
      $snapshot_img = "<img src='" . $run['snapshot'] . "' width=200 />";
      $snapshot = l($snapshot_img, $run['snapshot'], array('attributes' => array('target' => '_blank'), 'html' => TRUE));
    }
    $rows[] = array(
      $run['rid'],
      l($url_text, $test_base_url . $run['url']),
      $run['step_num'],
      $snapshot,
    );
  }
  $output .= theme('table', array('header' => $header, 'rows' => $rows));*/

  $output .= views_embed_view('drulenium_release_details', 'default', $re_id);
  $output .= '<h2>Edit release</h2>';
  $build_form = drupal_get_form('drulenium_visual_regression_create_release_form', $re_id);
  $output .= drupal_render($build_form);

  return $output;
}

function drulenium_visual_regression_create_initial_comparision_report_in_db($old_re_id, $new_re_id) {
  /*
   * Get all snapshot tasks of the base release $old_re_id
   * get the corresponding task id from the cmp release $new_re_id based on task weight
   * create diff entities accordingly
   */
  $query = new EntityFieldQuery();

  $query->entityCondition('entity_type', 'drulenium_test_task')
    ->entityCondition('bundle', 'snapshot_task')
    ->fieldCondition('field_dr_task_release', 'target_id', $old_re_id, '=');
  $result = $query->execute();
  if (isset($result['drulenium_test_task'])) {
    $tasks_items_ids = array_keys($result['drulenium_test_task']);
    $tasks_items = entity_load('drulenium_test_task', $tasks_items_ids);
    foreach ($tasks_items as $task_entity) {
      // Get task weight
      $task_entity_wrapper = entity_metadata_wrapper('drulenium_test_task', $task_entity);
      $task_weight = $task_entity_wrapper->field_dr_task_weight->value();
      $base_task_id = $task_entity_wrapper->id->value();
      $base_task_title = $task_entity_wrapper->title->value();
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'drulenium_test_task')
        ->entityCondition('bundle', 'snapshot_task')
        ->fieldCondition('field_dr_task_weight', 'value', $task_weight, '=')
        ->fieldCondition('field_dr_task_release', 'target_id', $new_re_id, '=')
        ->range(0, 1);
      $result = $query->execute();
      // Create diff entity only if there's a cmp task id
      if (isset($result['drulenium_test_task'])) {
        reset($result['drulenium_test_task']);
        $cmp_task_items_id = key($result['drulenium_test_task']);
        $entity_type = 'drulenium_visual_diff';
        $diff_entity = entity_create($entity_type, array('type' => 'drulenium_visual_diff'));
        $diff_wrapper = entity_metadata_wrapper($entity_type, $diff_entity);
        $diff_wrapper->field_dr_diff_base_task = $base_task_id;
        $diff_wrapper->field_dr_diff_cmp_task = $cmp_task_items_id;
        $diff_wrapper->title = $base_task_title;
        $diff_wrapper->created = REQUEST_TIME;
        $diff_wrapper->save();
      }
    }
  }
  /*$result = db_query("INSERT INTO drulenium_vr_results
    (run_base_id, run_cmp_id, release_base_id, release_cmp_id)
    SELECT substring_index(qids, ',', 1) AS base_qid,
      substring_index(qids, ',', -1) AS cmp_qid,
      :release_base_id,
      :release_cmp_id
    FROM (
        SELECT GROUP_CONCAT(q.rid) AS qids
          FROM drulenium_vr_runs q
          WHERE q.re_id = :base_release_id
            OR q.re_id = :cmp_release_id
          GROUP BY url, step_num
          ) q1",
  array(
    ':base_release_id' => $old_re_id,
    ':cmp_release_id' => $new_re_id,
    ':release_base_id' => $old_re_id,
    ':release_cmp_id' => $new_re_id
    )
  );*/
}

function drulenium_visual_regression_releases_compare($old_re_id, $new_re_id) {
  // If new id is less than old id, swap for comparison.
  if($new_re_id < $old_re_id){
    $tmp = $new_re_id;
    $new_re_id = $old_re_id;
    $old_re_id = $tmp;
  }
  /*
   * Check if there's any diff entity for these releases
   */
  $query = db_select('eck_drulenium_visual_diff', 'diff');
  $query->join('field_data_field_dr_diff_base_task', 'base_tsk', 'diff.id = base_tsk.entity_id');
  $query->join('field_data_field_dr_diff_cmp_task', 'cmp_tsk', 'diff.id = cmp_tsk.entity_id');
  $query->join('field_data_field_dr_task_release', 'base_rel', 'base_tsk.field_dr_diff_base_task_target_id = base_rel.entity_id');
  $query->join('field_data_field_dr_task_release', 'cmp_rel', 'cmp_tsk.field_dr_diff_cmp_task_target_id = cmp_rel.entity_id');
  $query->fields('diff', array('id'));
  $query->condition('base_rel.field_dr_task_release_target_id', $old_re_id);
  $query->condition('cmp_rel.field_dr_task_release_target_id', $new_re_id);
  $query->range(0, 1);
  $result = $query->execute()->fetchfield();

  if (!empty($result)) {
    // Embed result table view
    $output = views_embed_view('drulenium_diff_details', 'default', $old_re_id, $new_re_id);
  } else {
    $output = t("Sorry no results yet.");
  }
  return $output;
}

function drulenium_visual_regression_get_preset_snapshot_text($plugins, $step_num) {
  if($step_num == 0) return " -> Default";
  $output = "";
  $allPluginKeys = array_keys($plugins);
  if(!isset($allPluginKeys[$step_num-2])) {
    return $output;
  }
  $prev_plugin_key = $allPluginKeys[$step_num-2];
  $prev_plugin_arr = $plugins[$prev_plugin_key];
  // Removing suffix number from drulenium_filltextbox_1
  $prev_plugin_key = substr($prev_plugin_key, 0, strrpos($prev_plugin_key, "_"));
  switch ($prev_plugin_key) {
    case PLUGIN_FILL_TEXTBOX:
      $output .= drulenium_visual_regression_fill_textbox_plugin_to_text($prev_plugin_arr);
      break;
    case PLUGIN_CLICK_BUTTON:
      $output .= drulenium_visual_regression_click_button_plugin_to_text($prev_plugin_arr);
      break;
    case PLUGIN_HOVER_OVER:
      $output .= drulenium_visual_regression_hover_over_plugin_to_text($prev_plugin_arr);
      break;
    case PLUGIN_WAIT:
      $output .= drulenium_visual_regression_wait_plugin_to_text($prev_plugin_arr);
      $output .= ", after " . drulenium_visual_regression_get_preset_snapshot_text($plugins, $step_num - 1);
      break;
    case PLUGIN_TAKE_SCREENSHOT:
      break;
  }
  return $output;
}

function drulenium_visual_regression_fill_textbox_plugin_to_text($prev_plugin_arr) {
  $element_id = $prev_plugin_arr['description']['locator'];
  $locator_type = $prev_plugin_arr['description']['locator_type'];
  $value = $prev_plugin_arr['description']['text'];
  $output = "filling textbox[{$locator_type}: \"$element_id\"] with value \"$value\"";
  return $output;
}

function drulenium_visual_regression_snapshot_plugin_to_text($plugins, $step_num) {
  $output = "";
  $allPluginKeys = array_keys($plugins);
  if(!isset($allPluginKeys[$step_num-1])) {
    return $output;
  }
  $plugin_key = $allPluginKeys[$step_num-1];
  $plugin_arr = $plugins[$plugin_key];
  $element_id = $plugin_arr['description']['locator'];
  $locator_type = $plugin_arr['description']['locator_type'];
  $snapshot_mode = $plugin_arr['description']['snapshot_mode'];
  if(!empty($element_id)) {
    if($snapshot_mode == "exclude"){
      $output = "Snapshot excluding elements[{$locator_type}: \"$element_id\"]";
    }elseif($snapshot_mode == "include"){
      $output = "Snapshot including element[{$locator_type}: \"$element_id\"]";
    }
  }else{
    $output = "Whole page snapshot";
  }
  return $output;
}

function drulenium_visual_regression_wait_plugin_to_text($prev_plugin_arr)
{
  $element_id = $prev_plugin_arr['description']['locator'];
  $seconds = $prev_plugin_arr['description']['seconds'];
  if (!empty($element_id)){
    $output = "waiting for the element[CSS: \"$element_id\"] to be visible";
  }else{
    $output = "waiting for {$seconds} second(s)";
  }
  return $output;
}

function drulenium_visual_regression_click_button_plugin_to_text($prev_plugin_arr) {
  $element_id = $prev_plugin_arr['description']['locator'];
  $locator_type = $prev_plugin_arr['description']['locator_type'];
  $output = "clicking button[{$locator_type}: \"$element_id\"]";
  return $output;
}

function drulenium_visual_regression_hover_over_plugin_to_text($prev_plugin_arr) {
  $element_id = $prev_plugin_arr['description']['locator'];
  $locator_type = $prev_plugin_arr['description']['locator_type'];
  $output = "Hovering over element[{$locator_type}: \"$element_id\"]";
  return $output;
}

function drulenium_visual_regression_releases_compare_admin($old_re_id, $new_re_id) {
  // If new id is less than old id, swap for comparison.
  if($new_re_id < $old_re_id){
    $tmp = $new_re_id;
    $new_re_id = $old_re_id;
    $old_re_id = $tmp;
  }

  $output = l(t('Drulenium dashboard'), 'drulenium/vr');
  $output .= '<div class="update checked">';
  $github_username = variable_get('github_username', '');

  if ((variable_get('drulenium_vr_config_image_server_opt', 'drulenium') == 'local')) {
    $output .= ' <span class="process-locally">(' . l(t('Process locally'), "drulenium/vr/compare/process-local/$old_re_id/$new_re_id") . ')</span>';
  } elseif ((variable_get('drulenium_vr_config_image_server_opt', 'drulenium') == 'github') && !empty($github_username)) {
    $output .= ' <span class="process-locally">(' . l(t('Process via GitHub'), "drulenium/vr/compare/process-local/$old_re_id/$new_re_id") . ')</span>';
  } elseif(variable_get('drulenium_vr_config_image_server_opt', 'drulenium') == 'drulenium') {
    $last = variable_get("drulenium_vr_last_check_{$old_re_id}_{$new_re_id}");
    $output .= $last ? t('Last checked: @time ago', array('@time' => format_interval(REQUEST_TIME - $last))) : t('Last checked: never');
    $output .= ' <span class="check-manually">(' . l(t('Check manually'), 'drulenium/vr/compare/status/'.$base_release_secure_id.'/'.$cmp_release_secure_id) . ')</span>';
  }
  $output .= "</div>\n";
  $output .= "<div class='sharelink'>" . l(t('Secure share link'), _drulenium_secure_compare_link($old_re_id, $new_re_id));
  $output .= "</div>\n";

  $output2 = drulenium_visual_regression_releases_compare($old_re_id, $new_re_id);

  if ($output2 == t("Sorry no results yet.")) {
    drulenium_visual_regression_create_initial_comparision_report_in_db($old_re_id, $new_re_id);
    //If local, go to drupal_goto("drulenium/vr/compare/process-local/$old_release/$new_release");
    //If remote, make RPC call to Drulenium.
    if ((variable_get('drulenium_vr_config_image_server_opt', 'drulenium') == 'local')
      || ((variable_get('drulenium_vr_config_image_server_opt', 'drulenium') == 'github') && !empty($github_username))) {
      drupal_goto("drulenium/vr/compare/process-local/$old_re_id/$new_re_id");
    }
    elseif (variable_get('drulenium_vr_config_image_server_opt', 'drulenium') == 'drulenium') {
      //If local table is empty, make a rpc call to create entries
      $result = xmlrpc('http://drulenium.org/xmlrpc.php', array(
        'drulenium.api_create_compare_request' => array($base_release_secure_id, $cmp_release_secure_id),
      ));
      drupal_set_message($result);
      //http://devdemo.technikh.com/drulenium/vr/compare/2/1
      drupal_goto("drulenium/vr/compare/$old_re_id/$new_re_id");
    }
  }
  else {
    $output .= $output2;
  }
  return $output;
}

function drulenium_visual_regression_releases($preset_numeric_id = '') {
  drupal_set_title("Drulenium: Automated frontend testing");
  $build_form = drupal_get_form('drulenium_visual_regression_create_release_form', $release_id = NULL, $preset_numeric_id);
  $output = drupal_render($build_form);
  $compare_form = drupal_get_form('drulenium_visual_regression_compare_releases_form');
  $output .= drupal_render($compare_form);
  return $output;
}

function drulenium_visual_regression_create_release_form($form, &$form_state, $release_id = NULL, $preset_numeric_id = '') {
  $preset_cid = '';
  if(!empty($preset_numeric_id)) {
    $preset_cid = db_select('drulenium_preset', 'p')
      ->fields('p', array('name'))
      ->condition('p.oid', $preset_numeric_id)
      ->execute()
      ->fetchfield();
  }
  $form = array();
  $form['drulenium_vr_config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Configure'),
    '#description' => t('Configure the page paths that need to be tested.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['drulenium_vr_config']['drulenium_vr_release_name'] = array(
    '#title' => t('Release name'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#description' => t('Name of the release. default is current date & time.'),
    '#default_value' => format_date(REQUEST_TIME),
  );
  global $base_url;
  $form['drulenium_vr_config']['drulenium_vr_release_base_url'] = array(
    '#title' => t('Base URL'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#description' => t('Base URL of Site you want to test.<br/>For drupal7 sites, Base URL can be something like http://drupal7.example.com/?q= or http://drupal7.example.com/<br/>For drupal8 sites, Base URL can be something like http://drupal8.example.com/index.php/<br/>If your site is protected by HTTP Basic authentication, you can put the username & password in base url like https://user:password@www.stagesite.com/'),
    '#default_value' => variable_get('drulenium_vr_release_base_url', $base_url."/?q="),
  );

  if (empty($preset_cid)) {
    $form['drulenium_vr_config']['pages'] = array(
        '#type' => 'vertical_tabs',
        '#attached' => array(
            'js' => array(drupal_get_path('module', 'block') . '/block.js'),
    ),
    );

    // Per-path pages.
    $form['drulenium_vr_config']['pages']['path'] = array(
        '#type' => 'fieldset',
        '#title' => t('Pages'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#group' => 'pages',
        '#weight' => 0,
    );
    $form['drulenium_vr_config']['pages']['path']['drulenium_vr_path_custom'] = array(
        '#type' => 'textarea',
        '#title' => t('Test on specific pages'),
        '#description' => "Specify pages by using their paths. Enter one path per line. The '*' character is a wildcard. Example paths are blog for the blog page and blog/* for every personal blog. Use &lt;front&gt; for home page.",
        '#default_value' => variable_get('drulenium_vr_path_custom', '<front>'),
    );

    // Per-node-type testing.
    $form['drulenium_vr_config']['pages']['node'] = array(
        '#type' => 'fieldset',
        '#title' => t('Content Types'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#group' => 'pages',
        '#weight' => 20,
    );
    $node_types = array();
    $result = db_query('SELECT type, name FROM {node_type}');
    foreach ($result as $row) {
      $node_types[$row->type] = $row->name;
    }
    $form['drulenium_vr_config']['pages']['node']['drulenium_vr_node_custom'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Test for specific content types'),
        '#options' => $node_types,
        '#description' => t('Test on pages that display content of the given type(s).'),
        '#default_value' => variable_get('drulenium_vr_node_custom', array()),
    );
    $form['drulenium_vr_config']['pages']['node']['drulenium_vr_node_custom_limit'] = array(
        '#type' => 'textfield',
        '#size' => 10,
        '#title' => t('Limit'),
        '#description' => t('Maximum number of random pages to test for each of these type(s)'),
        '#default_value' => variable_get('drulenium_vr_node_custom_limit', DRULENIUM_NODE_LIMIT),
    );
    
    // Per-menu pages.
    $form['drulenium_vr_config']['pages']['menu'] = array(
        '#type' => 'fieldset',
        '#title' => t('Menus'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#group' => 'pages',
        '#weight' => 1,
    );
    $menu_types = menu_get_menus();
    $form['drulenium_vr_config']['pages']['menu']['drulenium_vr_menu_custom'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Test for specific menu pages'),
        '#options' => $menu_types,
        '#description' => t('Test on menu pages of the given menu type(s).'),
        '#default_value' => variable_get('drulenium_vr_menu_custom', array()),
    );

    // Per-term-type testing.
    $form['drulenium_vr_config']['pages']['term'] = array(
        '#type' => 'fieldset',
        '#title' => t('Taxonomy'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#group' => 'pages',
        '#weight' => 20,
    );
    $vocabs = array();
    $result = db_query('SELECT vid, name FROM {taxonomy_vocabulary}');
    foreach ($result as $row) {
      $vocabs[$row->vid] = $row->name;
    }
    $form['drulenium_vr_config']['pages']['term']['drulenium_vr_term_custom'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Test for specific Taxonomy Vocabularies'),
        '#options' => $vocabs,
        '#description' => t('Test on taxonomy term pages of the given Vocabulary type(s)'),
        '#default_value' => variable_get('drulenium_vr_term_custom', array()),
    );
    $form['drulenium_vr_config']['pages']['term']['drulenium_vr_term_custom_limit'] = array(
        '#type' => 'textfield',
        '#size' => 10,
        '#title' => t('Limit'),
        '#description' => t('Maximum number of random pages to test for each of these type(s)'),
        '#default_value' => variable_get('drulenium_vr_term_custom_limit', DRULENIUM_NODE_LIMIT),
    );
  }
  $form['drulenium_vr_config']['drulenium_vr_config_user'] = array(
    '#type' => 'fieldset',
    '#title' => t('Drupal User Configuration'),
    '#description' => t('Test as specified logged in Drupal user. Leave empty if the test has to be Anonymous.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['drulenium_vr_config']['drulenium_vr_config_user']['drulenium_vr_release_user_name'] = array(
    '#title' => t('Drupal user name'),
    '#type' => 'textfield',
    '#description' => t('User name of the user to test as.'),
    '#default_value' => variable_get('drulenium_vr_release_user_name', ""),
  );
  $form['drulenium_vr_config']['drulenium_vr_config_user']['drulenium_vr_release_user_pass'] = array(
    '#title' => t('Drupal user Password'),
    '#type' => 'password',
    '#description' => t("Passwords are stored in plain text. Don't use real accounts. Use temporary test accounts. Delete these test accounts after the test."),
    '#default_value' => variable_get('drulenium_vr_release_user_pass', ""),
  );

  if (!empty($release_id)) {
    $form_state['drulenium_visual_regression']['release_id'] = $release_id;
    // Prefill config.
    $release = db_select('drulenium', 're')
      ->fields('re', array('title', 'base_url', 'settings'))
      ->condition('drulenium_id', $release_id, '=')
      ->execute()
      ->fetchAssoc();
    $release_settings_encoded = $release['settings'];
    $release_settings = drupal_json_decode($release_settings_encoded);
    $test_user_name = $release_settings['user_name'];
    $test_user_pass = $release_settings['user_pass'];
    /*$query = db_select('drulenium_vr_releases', 'vr_re');
    $result = $query
      ->fields('vr_re', array('name', 'base_url', 'user_name', 'user_pass'))
      ->condition('vr_re.rid', $release_id)
      ->execute();
    $release = $result->fetchAssoc();*/
    $form['drulenium_vr_config']['drulenium_vr_release_name']['#default_value'] = $release['title'];
    $form['drulenium_vr_config']['drulenium_vr_release_base_url']['#default_value'] = $release['base_url'];
    $form['drulenium_vr_config']['drulenium_vr_release_user_name']['#default_value'] = $test_user_name;
    $form['drulenium_vr_config']['drulenium_vr_release_user_pass']['#default_value'] = $test_user_pass;

    // Prefill pages.
    $query = new EntityFieldQuery();

    $query->entityCondition('entity_type', 'drulenium_test_task')
      ->entityCondition('bundle', 'goto_task')
      ->fieldCondition('field_dr_task_release', 'target_id', $release_id, '=');
    $result = $query->execute();
    if (isset($result['drulenium_test_task'])) {
      $tasks_items_ids = array_keys($result['drulenium_test_task']);
      $tasks_items = entity_load('drulenium_test_task', $tasks_items_ids);
    }
    /*$query = db_select('drulenium_vr_runs', 'ru')
      ->fields('ru', array('url'))
      ->condition('re_id', $release_id, '=');
    $result = $query->execute();*/
    $path_list = '';
    foreach ($tasks_items as $task_entity) {
      $task_entity_wrapper = entity_metadata_wrapper('drulenium_test_task', $task_entity);
      $plugin_arr_encoded = $task_entity_wrapper->field_dr_task_settings->value();
      $plugin_arr = drupal_json_decode($plugin_arr_encoded);
      $url = $plugin_arr['description']['url'];
      if (empty($url)) {
        $url = "<front>";
      }
      $path_list .= $url . "\n";
    }
    $form['drulenium_vr_config']['pages']['path']['drulenium_vr_path_custom']['#default_value'] = $path_list;

    // Unsupported for edit mode.
    unset($form['drulenium_vr_config']['pages']['term']);
    unset($form['drulenium_vr_config']['pages']['node']);

    if (empty($release['user_name'])) {
      $form['drulenium_vr_config']['drulenium_vr_config_user']['#collapsed'] = TRUE;
    }
    $form['submit_button'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
    );
    $form['update_button'] = array(
      '#type' => 'submit',
      '#value' => t('Update Snapshots'),
    );
  }
  else {
    $form['submit_button'] = array(
      '#type' => 'submit',
      '#value' => t('Take Snapshot'),
    );
  }
  return $form;
}

function drulenium_visual_regression_create_release_form_validate($form, &$form_state) {
  // TODO $pages_array shouldn't be empty.

  // If username exists and no password.
  if (!empty($form_state['values']['drulenium_vr_release_user_name']) && empty($form_state['values']['drulenium_vr_release_user_pass'])) {
    form_set_error('drulenium_vr_release_user_pass', t("If the username exists, Password can't be empty. Remove username if you want to test as Anonymous user."));
  }

  if (variable_get('drulenium_vr_config_server_opt', 'drulenium') == "drulenium") {
    // Check if base url is reachable.
    $result = xmlrpc('http://drulenium.org/xmlrpc.php', array(
        'drulenium.api_validate_release' => array($form_state['values']['drulenium_vr_release_base_url']),
    ));
    if ($result != 1) {
      form_set_error('drulenium_vr_release_base_url', $result);
    }
  }
}

function drulenium_visual_regression_admin_settings_form($form, &$form_state) {
  $form['drulenium_vr_config']['drulenium_vr_config_server'] = array(
    '#type' => 'fieldset',
    '#title' => t('Snapshot Server Configuration'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  # the options to display in our form radio buttons
  $options = array(
    'drulenium' => t('Remote Drulenium server'),
    'local' => t('Local server'),
    'browserstack' => t('BrowserStack server'),
    'saucelabs' => t('Sauce labs server'),
  );

  $form['drulenium_vr_config']['drulenium_vr_config_server']['drulenium_vr_config_server_opt'] = array(
    '#type' => 'radios',
    '#title' => t('Server:'),
    '#options' => $options,
    '#description' => t('Pick the server you want to use. You will find Installation steps at <a target="_blank" href="http://drulenium.org/installation">http://drulenium.org/installation</a>'),
    '#default_value' => variable_get('drulenium_vr_config_server_opt', 'drulenium'),
  );

  $form['drulenium_vr_config']['drulenium_vr_config_server']['drulenium_vr_remote_drulenium_config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Remote Drulenium Server'),
    '#description' => t('Configuration for Remote Drulenium server.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#states' => array(
      'visible' => array(
        ':input[name="drulenium_vr_config_server_opt"]' => array('value' => 'drulenium'),
      ),
    ),
  );

  $site_email = variable_get('site_mail', '');
  $form['drulenium_vr_config']['drulenium_vr_config_server']['drulenium_vr_remote_drulenium_config']['drulenium_vr_release_notify_email'] = array(
    '#title' => t('Email'),
    '#type' => 'textfield',
    '#description' => t('Email to Notify on completion.'),
    '#default_value' => variable_get('drulenium_vr_release_notify_email', $site_email),
  );
  drulenium_visual_regression_drulenium_browser_settings_form($form);

  $form['drulenium_vr_config']['drulenium_vr_config_image_server'] = array(
      '#type' => 'fieldset',
      '#title' => t('Image Server Configuration'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
  );
  # the options to display in our form radio buttons
  $options = array(
    'drulenium' => t('Remote Drulenium server'),
    'local' => t('Local Image Magick server'),
    'github' => t('GitHub server'),
  );

  $form['drulenium_vr_config']['drulenium_vr_config_image_server']['drulenium_vr_config_image_server_opt'] = array(
      '#type' => 'radios',
      '#title' => t('Server:'),
      '#options' => $options,
      '#description' => t('Pick the server you want to use. You will find Installation steps at <a target="_blank" href="http://drulenium.org/installation">http://drulenium.org/installation</a>'),
      '#default_value' => variable_get('drulenium_vr_config_image_server_opt', 'drulenium'),
  );

  $form = system_settings_form($form);
  return $form;
}

function drulenium_visual_regression_drulenium_browser_settings_form(&$form) {
  $cache_bin = "cache";
  $cid = "drulenium_drulenium_browsers";
  if ($cache = cache_get($cid, $cache_bin)) {
    $cache_data = $cache->data;
    $all_browsers = drupal_json_decode($cache_data);
  } else {
    $browsers_api_url = "http://www.drulenium.org/api/browsers.json";
    $resp = drupal_http_request($browsers_api_url);
    $cache_data = $resp->data;
    if(($resp->code == 200) && !empty($cache_data)) {
      $all_browsers = drupal_json_decode($cache_data);
      cache_set($cid, $cache_data, $cache_bin, SAUCE_CACHE_EXPIRE_TIME);
    }
  }
  if(!empty($all_browsers)) {
    $os_options = array();
    $browser_options = array();
    $browser_version_options = array();
    foreach ($all_browsers as $browser_array) {
      $short_version = $browser_array['browser_version'];
      $browser_api_name = $browser_array['browser'];
      $os = "{$browser_array['os']} -> {$browser_array['os_version']}";

      $os_options[$os] = $os;
      $browser_options[$os][$browser_api_name] = $browser_api_name;
      $browser_version_options[$os][$browser_api_name][$short_version] = $short_version;
    }
    asort($os_options);
    $form['drulenium_vr_config']['drulenium_vr_config_server']['drulenium_vr_remote_drulenium_config']['drulenium_vr_drulenium_browsers'] = array(
        '#type' => 'fieldset',
        '#title' => t('Browsers'),
        '#description' => t('Configuration for taking screenshots using drulenium.'),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
    );
    $form['drulenium_vr_config']['drulenium_vr_config_server']['drulenium_vr_remote_drulenium_config']['drulenium_vr_drulenium_browsers']['drulenium_vr_drulenium_os'] = array(
        '#type' => 'select',
        '#title' => t('OS'),
        '#options' => $os_options,
        '#default_value' => variable_get('drulenium_vr_drulenium_os', ''),
        '#description' => t('Pick an operating system for the device to test.'),
    );
    foreach ($os_options as $os) {
      asort($browser_options[$os]);
      $os_id = drulenium_visual_regression_name_to_id($os);
      $form['drulenium_vr_config']['drulenium_vr_config_server']['drulenium_vr_remote_drulenium_config']['drulenium_vr_drulenium_browsers']['drulenium_vr_drulenium_browser_'.$os_id] = array(
          '#type' => 'select',
          '#title' => t('Browser'),
          '#options' => $browser_options[$os],
          '#default_value' => variable_get('drulenium_vr_drulenium_browser_'.$os_id, ''),
          '#description' => t('Pick a browser.'),
          '#states' => array(
              'visible' => array(
                  ':input[name="drulenium_vr_drulenium_os"]' => array('value' => $os),
              ),
          ),
      );
      foreach ($browser_options[$os] as $browser) {
        asort($browser_version_options[$os][$browser]);
        $browser_id = drulenium_visual_regression_name_to_id($browser);
        $form['drulenium_vr_config']['drulenium_vr_config_server']['drulenium_vr_remote_drulenium_config']['drulenium_vr_drulenium_browsers']['drulenium_vr_drulenium_browser_version_'."{$os_id}_{$browser_id}"] = array(
            '#type' => 'select',
            '#title' => t('Version'),
            '#options' => $browser_version_options[$os][$browser],
            '#default_value' => variable_get('drulenium_vr_drulenium_browser_version_'."{$os_id}_{$browser_id}", ''),
            '#description' => t('Pick a version.'),
            '#states' => array(
                'visible' => array(
                    ':input[name="drulenium_vr_drulenium_os"]' => array('value' => $os),
                    ':input[name="drulenium_vr_drulenium_browser_'.$os_id.'"]' => array('value' => $browser),
                ),
            ),
        );
      }
    }
  }
}

function drulenium_visual_regression_name_to_id($name) {
  $name = trim($name);
  $id = str_replace(" ", "_", strtolower($name));
  $id = str_replace(".", "_", $id);
  return $id;
}

function drulenium_visual_regression_admin_settings_form_validate($form, &$form_state) {
  // If Snapshot server is Drulenium, Image server should also be Drulenium
  if (($form_state['values']['drulenium_vr_config_server_opt'] == "drulenium") && ($form_state['values']['drulenium_vr_config_image_server_opt'] != "drulenium")) {
    form_set_error('drulenium_vr_config_image_server_opt', 'If Snapshot server is configured to use Drulenium, Image server should also be Drulenium.');
  }
  // If Image server is Drulenium, Snapshot server should also be Drulenium
  if (($form_state['values']['drulenium_vr_config_image_server_opt'] == "drulenium") && ($form_state['values']['drulenium_vr_config_server_opt'] != "drulenium")) {
    form_set_error('drulenium_vr_config_server_opt', 'If Image server is configured to use Drulenium, Snapshot server should also be Drulenium.');
  }
  // If not Drulenium, check if libraries module is enabled
  if ($form_state['values']['drulenium_vr_config_server_opt'] != "drulenium") {
    if (!module_exists('libraries')) {
      form_set_error('drulenium_vr_config_server_opt', 'Enable libraries module. https://www.drupal.org/project/libraries');
      // After this below libraries_load function gets called and throws fatal error if the return statement doesn't exist.
      return 0;
    }
  }
  // If Image magick, check version
  if ($form_state['values']['drulenium_vr_config_image_server_opt'] == "local") {
    $image_magick_path = variable_get('drulenium_vr_release_imagemagick_path', "/opt/local/bin");
    exec("$image_magick_path/convert -version", $out, $image_magick_code);
    // $image_magick_code = 0 if OK, nonzero if error.
    if ($image_magick_code != 0) {
      form_set_error('drulenium_vr_config_image_server_opt', 'Install Image magick & configure the Path to the Image Magick binary accordingly at /drulenium/settings/local');
    }
  }
  //If Github, check authentication
  if ($form_state['values']['drulenium_vr_config_image_server_opt'] == "github") {
    if (($library = libraries_load("php-github-api")) && !empty($library['loaded'])) {
      $github_username = variable_get('github_username', '');
      $github_password = variable_get('github_password', '');
      $github_repo = variable_get('github_repo', '');
      $client = new \Github\Client();
      $client->authenticate($github_username, $github_password, Github\Client::AUTH_HTTP_PASSWORD);
      try {
        // Call an API that requires Authentication and test if authenticated
        $keys = $client->api('repo')->keys()->all($github_username, $github_repo);
      }
      catch (Exception $e) {
        form_set_error('drulenium_vr_config_image_server_opt', 'Configure Github accordingly at /drulenium/settings/github');
      }
    }else{
      form_set_error('drulenium_vr_config_image_server_opt', 'Install Github library accordingly');
    }
  }
  //If Sauce labs, check library
  if ($form_state['values']['drulenium_vr_config_server_opt'] == "saucelabs") {
    $saucelabs_username = variable_get('saucelabs_username', '');
    $saucelabs_access_key = variable_get('saucelabs_api', '');
    if (!empty($saucelabs_username) && !empty($saucelabs_access_key) && ($library = libraries_load("sausage")) && !empty($library['loaded'])) {
      $s = new Sauce\Sausage\SauceAPI($saucelabs_username, $saucelabs_access_key);
      $res = $s->getAccountDetails();
      if(isset($res['error']) && !empty($res['error'])) {
        form_set_error('drulenium_vr_config_server_opt', 'Install Sauce Labs library & configure it accordingly at /drulenium/settings/saucelabs');
      }
    }
  }
  // If local, check Selenium
  if ($form_state['values']['drulenium_vr_config_server_opt'] == "local") {
    if (($library = libraries_load("selenium_webdriver")) && !empty($library['loaded'])) {
      $host = variable_get('drulenium_vr_release_selenium_host', "http://localhost:4444/wd/hub"); // this is the default
      $browser = variable_get('drulenium_vr_release_selenium_browser', 'firefox');
      $capabilities = DesiredCapabilities::$browser();
      try {
        $driver = RemoteWebDriver::create($host, $capabilities, 5000);
        // Close the Firefox.
        $driver->quit();
      }
      catch (Exception $e) {
        form_set_error('drulenium_vr_config_server_opt', 'Configure local Selenium config accordingly at /drulenium/settings/local and run the selenium server.');
      }
    }else{
      form_set_error('drulenium_vr_config_server_opt', 'Install selenium_webdriver library accordingly');
    }
  }
  // If BrowserStack, check Selenium
  if ($form_state['values']['drulenium_vr_config_server_opt'] == "browserstack") {
    if (($library = libraries_load("selenium_webdriver")) && !empty($library['loaded'])) {
      $browser_stack_username = variable_get('browserstack_username', "");
      $browser_stack_access_key = variable_get('browserstack_access_key', "");
      $host = "http://{$browser_stack_username}:{$browser_stack_access_key}@hub.browserstack.com/wd/hub";

      $browserstack_browser_platform = variable_get('drulenium_vr_browserstack_os', '');
      $browserstack_browser_platform_os_version_seperator_index = strpos($browserstack_browser_platform, " -> ");
      $browserstack_browser_platform_os = substr($browserstack_browser_platform, 0, $browserstack_browser_platform_os_version_seperator_index);
      $browserstack_browser_platform_os_version = substr($browserstack_browser_platform, $browserstack_browser_platform_os_version_seperator_index+4);
      $browserstack_browser_platform_id = drulenium_visual_regression_name_to_id($browserstack_browser_platform);
      $browserstack_browser_name = variable_get('drulenium_vr_browserstack_browser_'.$browserstack_browser_platform_id, '');
      $browserstack_browser_name_id = drulenium_visual_regression_name_to_id($browserstack_browser_name);
      $browserstack_browser_version = variable_get('drulenium_vr_browserstack_browser_version_'."{$browserstack_browser_platform_id}_{$browserstack_browser_name_id}", '');

      $capabilities = array(
          "browser" => $browserstack_browser_name,
          "browser_version" => $browserstack_browser_version,
          "os" => $browserstack_browser_platform_os,
          "os_version" => $browserstack_browser_platform_os_version,
          "browserstack.debug" => variable_get('browserstack_debugging', 'false'),
      );
      try {
        $driver = RemoteWebDriver::create($host, $capabilities, 5000);
        // Close the Firefox.
        $driver->quit();
      }
      catch (Exception $e) {
        form_set_error('drulenium_vr_config_server_opt', 'Configure BrowserStack config accordingly at /drulenium/settings/browserstack.');
      }
    }else{
      form_set_error('drulenium_vr_config_server_opt', 'Install selenium_webdriver library accordingly');
    }
  }

  // TODO: Test saucelabs, github, local server settings for appropriate user choice
}

function drulenium_visual_regression_merge_pages_array(&$pages_array, $specific_node_types = array(), $specific_menu_types = array(), $specific_term_types = array(), $specific_pages = "" ) {
  // Get limit 
  $node_limit = variable_get('drulenium_vr_node_custom_limit', DRULENIUM_NODE_LIMIT);
  foreach ($specific_node_types as $node_type) {
    if(!empty($node_type)){
      // Select few random nodes from each content type.
      $result = db_select('node', 'n')
  		->fields('n', array('nid'))
  		->condition('n.status', 1)
  		->condition('n.type', $node_type)
  		->orderRandom()
  		->range(0, $node_limit)
  		->execute();
  	  while($row = $result->fetchObject()) {
  	  	$nid = $row->nid;
      	$link_path = "node/$nid";
      	$pages_array[] = $link_path;
  	  }
    }
  }

  $selected_menu_types_array = array();
  foreach ($specific_menu_types as $menu_type) {
    if(!empty($menu_type)) {
      $selected_menu_types_array[] = $menu_type;
    }
  }
  if (!empty($selected_menu_types_array)) {
    // Select all static menu links from each menu type.
    $result = db_select('menu_links', 'ml')
  		->fields('ml', array('link_path'))
  		->condition('ml.link_path', '%' . db_like("%") . '%', 'NOT LIKE')
  		->condition('ml.menu_name', $selected_menu_types_array, "IN")
  		->execute();
    while($row = $result->fetchObject()) {
      $link_path = $row->link_path;
      $pages_array[] = $link_path;
    }
  }

  // Get limit.
  $term_limit = variable_get('drulenium_vr_term_custom_limit', DRULENIUM_NODE_LIMIT);

  foreach ($specific_term_types as $term_type) {
    if(!empty($term_type)){
      // Select few random terms from each vocabulary.
      $result = db_select('taxonomy_term_data', 't')
  		->fields('t', array('tid'))
  		->condition('t.vid', $term_type)
  		->orderRandom()
  		->range(0, $term_limit)
  		->execute();
  	  while($row = $result->fetchObject()) {
  	  	$tid = $row->tid;
        $link_path = "taxonomy/term/$tid";
        $pages_array[] = $link_path;
  	  }
    }
  }

  $specific_pages = trim($specific_pages);
  if (!empty($specific_pages)) {
    $specific_pages_array = explode("\n", $specific_pages);
    foreach ($specific_pages_array as $key => $page) {
      $page = trim($page);

      // Expand wildcards in $specific_pages based uppon menu links in the database.
      if (_drulenium_vr_endsWith($page, "*")) {
        $pattern = substr($page, 0, strlen($page) - 1);
        $result = db_query(
          'SELECT link_path FROM {menu_links} m WHERE link_path like :pattern',
          array(':pattern' => db_like($pattern) . '%')
        );
        foreach ($result as $row) {
          $link_path = $row->link_path;
          if(_drulenium_vr_contains("%", $link_path)){
            continue;
          }
          $pages_array[] = $link_path;
        }

        $result = db_query(
          'SELECT alias FROM {url_alias} u WHERE alias like :pattern',
           array(':pattern' => db_like($pattern) . '%')
        );
        foreach ($result as $row) {
          $link_path = $row->alias;
          $pages_array[] = $link_path;
        }
      }
      else {
        $pages_array[] = $page;
      }
    }
  }

  // Removing duplicate paths.
  $pages_array = array_unique($pages_array);
}

function drulenium_visual_regression_create_release_in_db($secureid, $release_name, $vr_base_url, &$pages_array, $vr_user_name = '', $vr_user_pass = '', $specific_node_types = array(), $specific_menu_types = array(), $specific_term_types = array(), $specific_pages = "", $preset_cid = "", $settings_array = array()) {
  if (empty($vr_base_url)) {
    global $base_url;
    $vr_base_url = $base_url . "/?q=";
  }

  drulenium_visual_regression_merge_pages_array($pages_array, $specific_node_types, $specific_menu_types, $specific_term_types, $specific_pages);

  /*if (empty($pages_array)) {
    drupal_set_message("No pages found in your configuration. Please reconfigure & resubmit with atleast one valid page.", 'error');
    return "";
  }*/
  $settings_array["user_name"] = $vr_user_name;
  $settings_array["user_pass"] = $vr_user_pass;

  $release_entity = entity_get_controller('drulenium')->create();
  $release_entity->title = $release_name;
  $release_entity->secure_id = $secureid;
  $preset_numeric_id = db_select('drulenium_preset', 'p')
    ->fields('p', array('oid'))
    ->condition('p.name', $preset_cid)
    ->execute()
    ->fetchfield();
  $release_entity->test_id = $preset_numeric_id;
  $release_entity->base_url = $vr_base_url;
  $release_entity->settings = drupal_json_encode($settings_array);
  drulenium_save($release_entity);
  $release_id = $release_entity->drulenium_id;

  /*$fields = array(
      'name' => $release_name,
      'secure_id' => $secureid,
      'preset_cid' => $preset_cid,
  	  'base_url' => $vr_base_url,
      'user_name' => $vr_user_name,
  	  'user_pass' => $vr_user_pass,
      'created' => REQUEST_TIME,
      'settings' => drupal_json_encode($settings_array),
  );
  $release_id = db_insert('drulenium_vr_releases')->fields($fields)->execute();*/

  // Create db records for the individual pages.
  $task_weight = 0;
  foreach ($pages_array as $key => $page) {
    if (empty($page)) {
      unset($pages_array[$key]);
    }
    else {
      if ($page == "<front>") {
        $page = "";
        $pages_array[$key] = $page;
      }
      /*$fields = array(
	      're_id' => $release_id,
	      'url' => $page,
      );*/
      $plugin_arr = array();
      $plugin_arr['description']['url'] = $page;
      if (empty($page)) {
        $page = "Homepage";
      }
      // Create goto_task
      drulenium_visual_regression_update_create_task_entity($entity_bundle_type = 'goto_task', $release_id, $task_title = "Go to {$page}", $task_settings = $plugin_arr, $task_weight);
      $task_weight++;
      // Create snapshot_task if there's no pre defined preset
      if (empty($preset_cid)) {
        drulenium_visual_regression_update_create_task_entity($entity_bundle_type = 'snapshot_task', $release_id, $task_title = "Snapshot of {$page}", $task_settings = array(), $task_weight);
        $task_weight++;
      }else{
        $preset_obj = drulenium_preset_load($preset_cid);
        foreach ($preset_obj->settings['plugins'] as $type_and_num => $plugin_arr) {
          $plugin_type = $plugin_arr["type"];
          $task_title = drulenium_visual_regression_get_plugin_text($plugin_type, $plugin_arr);
          switch ($plugin_type) {
            case PLUGIN_FILL_TEXTBOX:
              drulenium_visual_regression_update_create_task_entity('fill_textbox_task', $release_id, $task_title, $plugin_arr, $task_weight);
              break;
            case PLUGIN_CLICK_BUTTON:
              drulenium_visual_regression_update_create_task_entity('click_button_task', $release_id, $task_title, $plugin_arr, $task_weight);
              break;
            case PLUGIN_HOVER_OVER:
              drulenium_visual_regression_update_create_task_entity('hover_over_task', $release_id, $task_title, $plugin_arr, $task_weight);
              break;
            case PLUGIN_WAIT:
              drulenium_visual_regression_update_create_task_entity('wait_task', $release_id, $task_title, $plugin_arr, $task_weight);
              break;
            case PLUGIN_VERIFY_TEXT:
              drulenium_visual_regression_update_create_task_entity('verify_text_task', $release_id, $task_title, $plugin_arr, $task_weight);
              break;
            case PLUGIN_TAKE_SCREENSHOT:
              drulenium_visual_regression_update_create_task_entity('snapshot_task', $release_id, $task_title, $plugin_arr, $task_weight);
              break;
          }
          $task_weight++;
        }
      }
      //$result = db_insert('drulenium_vr_runs')->fields($fields)->execute();
    }
  }

  return $release_id;
}

function drulenium_visual_regression_get_plugin_text($plugin_type, $plugin_arr) {
  $output = "";
  switch ($plugin_type) {
    case PLUGIN_FILL_TEXTBOX:
      $output .= drulenium_visual_regression_fill_textbox_plugin_to_text($plugin_arr);
      break;
    case PLUGIN_CLICK_BUTTON:
      $output .= drulenium_visual_regression_click_button_plugin_to_text($plugin_arr);
      break;
    case PLUGIN_HOVER_OVER:
      $output .= drulenium_visual_regression_hover_over_plugin_to_text($plugin_arr);
      break;
    case PLUGIN_WAIT:
      $output .= drulenium_visual_regression_wait_plugin_to_text($plugin_arr);
      break;
    case PLUGIN_TAKE_SCREENSHOT:
      $output .= drulenium_visual_regression_screenshot_plugin_to_text($plugin_arr);
      break;
  }
  return $output;
}

function drulenium_visual_regression_screenshot_plugin_to_text($plugin_arr) {
  $output = "";
  $element_id = $plugin_arr['description']['locator'];
  $snapshot_mode = $plugin_arr['description']['snapshot_mode'];
  if(!empty($element_id)) {
    if($snapshot_mode == "exclude"){
      $output = "Snapshot excluding elements[CSS: \"$element_id\"]";
    }elseif($snapshot_mode == "include"){
      $output = "Snapshot including element[CSS: \"$element_id\"]";
    }
  }else{
    $output = "Whole page snapshot";
  }
  return $output;
}

// Task is part of the $release_id
function drulenium_visual_regression_update_create_task_entity($entity_bundle_type, $release_id, $task_title, $task_settings = array(), $task_weight = 0){
  $entity_type = 'drulenium_test_task';
  $task_entity = entity_create($entity_type, array('type' => $entity_bundle_type));
  $task_wrapper = entity_metadata_wrapper($entity_type, $task_entity);
  $task_wrapper->field_dr_task_release = $release_id;
  $task_wrapper->field_dr_task_weight = $task_weight;
  $task_wrapper->title = $task_title;
  if(!empty($task_settings)){
    $task_wrapper->field_dr_task_settings = drupal_json_encode($task_settings);
  }
  $task_wrapper->save();
}

function drulenium_visual_regression_update_release_in_db($release_id, $release_name, $vr_base_url, &$pages_array, $vr_user_name = '', $vr_user_pass = '', $specific_node_types = array(), $specific_menu_types = array(), $specific_term_types = array(), $specific_pages = "", $preset_cid = "" ) {
  drulenium_visual_regression_merge_pages_array($pages_array, $specific_node_types, $specific_menu_types, $specific_term_types, $specific_pages);

  if (empty($pages_array)) {
    drupal_set_message("No pages found in your configuration. Please reconfigure & resubmit with atleast one valid page.", 'error');
    return "";
  }
  $fields = array(
    'name' => $release_name,
    'base_url' => $vr_base_url,
    'preset_cid' => $preset_cid,
    'user_name' => $vr_user_name,
    'user_pass' => $vr_user_pass,
  );
  db_update('drulenium_vr_releases')->fields($fields)->condition('rid', $release_id)->execute();

  // Delete entries in drulenium_vr_runs.
  db_delete('drulenium_vr_runs')
    ->condition('re_id', $release_id)
    ->execute();

  // Create db records for the individual pages.
  foreach ($pages_array as $key => $page) {
    if (empty($page)) {
      unset($pages_array[$key]);
    }
    else {
      if($page == "<front>"){
        $page = "";
        $pages_array[$key] = $page;
      }
      $fields = array(
	      're_id' => $release_id,
	      'url' => $page,
      );
      $result = db_insert('drulenium_vr_runs')->fields($fields)->execute();
    }
  }

  return $release_id;
}

function drulenium_visual_regression_get_preset_config($preset_cid) {
  $preset_obj = drulenium_preset_load($preset_cid);
  $specific_pages = $preset_obj->settings['pages']['path']['custom'];
  $specific_node_types = $preset_obj->settings['pages']['node']['custom'];
  $specific_menu_types = array();
  $specific_term_types = $preset_obj->settings['pages']['term']['custom'];
  $config = array(
      'specific_pages' => $specific_pages,
      'specific_node_types' => $specific_node_types,
      'specific_menu_types' => $specific_menu_types,
      'specific_term_types' => $specific_term_types,
  );
  return $config;
}

function drulenium_visual_regression_create_release_form_submit($form, &$form_state) {
  $preset_numeric_id = '';
  if(arg(0) == 'drulenium' && arg(1) == 'vr'){
    $preset_numeric_id = arg(2);
  }
  $preset_cid = '';
  if(!empty($preset_numeric_id)) {
    $preset_cid = db_select('drulenium_preset', 'p')
      ->fields('p', array('name'))
      ->condition('p.oid', $preset_numeric_id)
      ->execute()
      ->fetchfield();
  }

  $pages_array = array();

  $test_user_pass = $form_state['values']['drulenium_vr_release_user_pass'];
  $test_user_name = $form_state['values']['drulenium_vr_release_user_name'];
  if(empty($preset_cid)) {
    $specific_pages = $form_state['values']['drulenium_vr_path_custom'];
    if (!empty($form_state['drulenium_visual_regression']['release_id'])) {
      $specific_node_types = $specific_term_types = array();
      $release_id = $form_state['drulenium_visual_regression']['release_id'];
    } else {
      $specific_node_types = $form_state['values']['drulenium_vr_node_custom'];
      $specific_menu_types = $form_state['values']['drulenium_vr_menu_custom'];
      $specific_term_types = $form_state['values']['drulenium_vr_term_custom'];
    }

    // Store some values globally as default for the next time.
    variable_set('drulenium_vr_path_custom', $specific_pages);
    variable_set('drulenium_vr_node_custom', $specific_node_types);
    variable_set('drulenium_vr_node_custom_limit', $form_state['values']['drulenium_vr_node_custom_limit']);
    variable_set('drulenium_vr_menu_custom', $specific_menu_types);
    variable_set('drulenium_vr_term_custom', $specific_term_types);
    variable_set('drulenium_vr_term_custom_limit', $form_state['values']['drulenium_vr_term_custom_limit']);

    variable_set('drulenium_vr_release_user_name', $test_user_name);
    variable_set('drulenium_vr_release_user_pass', $test_user_pass);
  } else {
    //Get pages from $preset_cid
    $config_array = drulenium_visual_regression_get_preset_config($preset_cid);

    $specific_pages = $config_array['specific_pages'];
    $specific_node_types = $config_array['specific_node_types'];
    $specific_menu_types = $config_array['specific_menu_types'];
    $specific_term_types = $config_array['specific_term_types'];
  }
  $vr_base_url = $form_state['values']['drulenium_vr_release_base_url'];
  variable_set('drulenium_vr_release_base_url', $vr_base_url);


  $secureid = drupal_hash_base64(drupal_random_bytes(55));
  $release_name = $form_state['values']['drulenium_vr_release_name'];


  if (empty($release_id)) {
    // New.
    $release_id = drulenium_visual_regression_create_release_in_db($secureid, $release_name, $vr_base_url, $pages_array, $test_user_name, $test_user_pass, $specific_node_types, $specific_menu_types, $specific_term_types, $specific_pages, $preset_cid);
  }
  else {
    // Update.
    $release_id = drulenium_visual_regression_update_release_in_db($release_id, $release_name, $vr_base_url, $pages_array, $test_user_name, $test_user_pass, $specific_node_types, $specific_menu_types, $specific_term_types, $specific_pages, $preset_cid);
  }

  // No need to continue with processing if only asked to save the settings.
  if ($form_state['values']['op'] == t('Save')) {
    return;
  }

  if (variable_get('drulenium_vr_config_server_opt', 'drulenium') == "drulenium") {
    drulenium_visual_regression_create_release_in_drulenium_db($release_id, $secureid, $vr_base_url, $pages_array, $test_user_name, $test_user_pass);
    drupal_goto("drulenium/vr/release/".$release_id);
  } elseif (variable_get('drulenium_vr_config_server_opt', 'drulenium') == "saucelabs") {
    drupal_goto("drulenium/vr/release/process-saucelabs/".$release_id);
  } else {
    drupal_set_message("Your request is being processed locally, in a batch.");
    drupal_goto("drulenium/vr/release/process-local/" . $release_id);
  }

}

function drulenium_visual_regression_get_secure_id($re_id)
{
  $result = db_select('drulenium', 're')
    ->fields('re', array('secure_id'))
    ->condition('re.drulenium_id', $re_id)
    ->execute();
  $release = $result->fetchAssoc();
  $secure_id = $release['secure_id'];
  return $secure_id;
}

function drulenium_visual_regression_update_result_in_drulenium_db($old_re_id, $new_re_id){
  // Get secure id's of both releases
  $old_re_secure_id = drulenium_visual_regression_get_secure_id($old_re_id);
  $new_re_secure_id = drulenium_visual_regression_get_secure_id($new_re_id);
  $secure_id = "{$old_re_secure_id}--{$new_re_secure_id}";
  $email = variable_get('drulenium_vr_release_notify_email', '');
  // Create remote request record.
  $rpc_result = xmlrpc('http://drulenium.org/xmlrpc.php', array(
    'drulenium.api_create_result_request' => array($secure_id, $email),
  ));
  drupal_set_message($rpc_result);
  /*
   * Get Max count of all diff entities with diff percent greater than zero.
   */
  $query = db_select('eck_drulenium_visual_diff', 'diff');
  $query-> leftJoin('field_data_field_dr_diff_base_task', 'base_tsk', 'diff.id = base_tsk.entity_id');
  $query-> leftJoin('field_data_field_dr_diff_cmp_task', 'cmp_tsk', 'diff.id = cmp_tsk.entity_id');
  $query-> leftJoin('field_data_field_dr_task_release', 'base_rel', 'base_tsk.field_dr_diff_base_task_target_id = base_rel.entity_id');
  $query-> leftJoin('field_data_field_dr_task_release', 'cmp_rel', 'cmp_tsk.field_dr_diff_cmp_task_target_id = cmp_rel.entity_id');
  $query-> leftJoin('field_data_field_dr_diff_percentage', 'diff_percent', 'diff.id = diff_percent.entity_id');
  $query->fields('diff', array('id'));
  $query->condition('base_rel.field_dr_task_release_target_id', $old_re_id);
  $query->condition('cmp_rel.field_dr_task_release_target_id', $new_re_id);
  $query->condition('diff_percent.field_dr_diff_percentage_value', 0, '>');
  $result = $query->execute();
  $query->addExpression('COUNT(id)', 'run_count');
  $result = $query->execute();
  $row = $result->fetchAssoc();
  $max = $row['run_count'];

  // Process the queue using Batch API.
  $batch = array(
    'file' => drupal_get_path('module', 'drulenium_visual_regression') . '/drulenium_visual_regression.module',
    'operations' => array(),
    'finished' => 'drulenium_visual_regression_update_result_in_drulenium_db_batch_finished',
    'title' => t('Performing %operation on the selected items...', array('%operation' => "Upload to Drulenium.org")),
  );
  $progress = 0; // where to start
  $limit = 1; // how many to process for each run

  while ($progress <= $max) {
    $batch['operations'][] = array('drulenium_visual_regression_update_result_in_drulenium_db_batch_op', array($old_re_id, $new_re_id, $secure_id, $progress, $limit));
    $progress = $progress + $limit;
  }
  batch_set($batch);
}

function drulenium_visual_regression_create_release_in_drulenium_db($release_id, $secureid, $vr_base_url, $pages_array, $test_user_name, $test_user_pass){
  // RPC call to add job in remote queue.
  global $base_url;
  $site_email = variable_get('site_mail', '');
  $notify_email = variable_get('drulenium_vr_release_notify_email', $site_email);
  $drulenium_browser_platform = variable_get('drulenium_vr_drulenium_os', '');
  $drulenium_browser_platform_os_version_seperator_index = strpos($drulenium_browser_platform, " -> ");
  $drulenium_browser_platform_os = substr($drulenium_browser_platform, 0, $drulenium_browser_platform_os_version_seperator_index);
  $drulenium_browser_platform_os_version = substr($drulenium_browser_platform, $drulenium_browser_platform_os_version_seperator_index+4);
  $drulenium_browser_platform_id = drulenium_visual_regression_name_to_id($drulenium_browser_platform);
  $drulenium_browser_name = variable_get('drulenium_vr_drulenium_browser_'.$drulenium_browser_platform_id, '');
  $drulenium_browser_name_id = drulenium_visual_regression_name_to_id($drulenium_browser_name);
  $drulenium_browser_version = variable_get('drulenium_vr_drulenium_browser_version_'."{$drulenium_browser_platform_id}_{$drulenium_browser_name_id}", '');

  $browser_array = array(
      "browser" => $drulenium_browser_name,
      "browser_version" => $drulenium_browser_version,
      "os" => $drulenium_browser_platform_os,
      "os_version" => $drulenium_browser_platform_os_version,
  );
  $result = xmlrpc('http://drulenium.org/xmlrpc.php', array(
      'drulenium.api_create_release' => array($release_id, $secureid, $vr_base_url, $pages_array, $notify_email, $base_url, $test_user_name, $test_user_pass, $browser_array),
  ));
  drupal_set_message($result);
}


function drulenium_visual_regression_compare_releases_form($form, $form_state) {
  $result = db_select('drulenium', 're')
  ->fields('re', array('title', 'drulenium_id'))
    ->condition('re.bundle_type', 'drulenium_test_run')
  ->execute();
  $release_ids = array();
  while($release = $result->fetchAssoc()) {
    $release_ids[$release['drulenium_id']] = '';
    $form['info'][$release['drulenium_id']] = array(
        '#markup' => l($release['title'],"drulenium/vr/release/".$release['drulenium_id']),
    );
    $operations = array(
          '#markup' => l(t('Delete'), "drulenium/vr/delete-release/".$release['drulenium_id']),
    );
    $form['operations'][$release['drulenium_id']][0] = $operations;

  }
  if(empty($release_ids)){
    return '';
  }
  $new_vid = key($release_ids);
  next($release_ids);
  $old_vid = key($release_ids);
  $form['diff']['old'] = array(
    '#type' => 'radios',
    '#options' => $release_ids,
    '#default_value' => $old_vid,
  );
  $form['diff']['new'] = array(
    '#type' => 'radios',
    '#options' => $release_ids,
    '#default_value' => $new_vid,
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Compare'));


  $diff_module = drupal_get_path('module', 'diff');
  $form['#attached']['css'] = array($diff_module . '/css/diff.default.css');
  $form['#attached']['js'] = array($diff_module . '/js/diff.js');
  // dsm($form);
  return $form;
}

function drulenium_visual_regression_compare_releases_form_submit($form, &$form_state) {
  // dsm($form_state);
  $old_release = $form_state['values']['old'];
  $new_release = $form_state['values']['new'];
  drupal_goto("drulenium/vr/compare/$old_release/$new_release");
}

/**
 * Theme function to display the revisions formular.
 */
function theme_drulenium_visual_regression_compare_releases_form($vars) {
  $form = $vars['form'];
  if(!isset($form['diff'])){
    return '';
  }
  $output = '';

  // Overview table:
  $header = array(
  t('Release'),
  array('data' => drupal_render($form['submit']), 'colspan' => 2),
  array('data' => t('Operations'), 'colspan' => 2),
  );
  if (isset($form['info']) && is_array($form['info'])) {
    foreach (element_children($form['info']) as $key) {
      $row = array();
      if (isset($form['operations'][$key][0])) {
        // Note: even if the commands for revert and delete are not permitted,
        // the array is not empty since we set a dummy in this case.
        $row[] = drupal_render($form['info'][$key]);
        $row[] = drupal_render($form['diff']['old'][$key]);
        $row[] = drupal_render($form['diff']['new'][$key]);
        $row[] = drupal_render($form['operations'][$key][0]);
        $row[] = drupal_render($form['operations'][$key][1]);
        $rows[] = array(
          'data' => $row,
          'class' => array('diff-revision'),
        );
      }
      else {
        // (no commands to delete).
        $row[] = array(
          'data' => "No Operations.",
          'class' => array('revision-current'),
        );
      }
    }
  }
  $output .= theme('table__diff__revisions', array(
    'header' => $header,
    'rows' => $rows,
    'sticky' => FALSE,
    'attributes' => array('class' => 'diff-revisions'),
  ));

  $output .= drupal_render_children($form);
  return $output;
}

function _drulenium_vr_endsWith($haystack, $needle)
{
  $length = strlen($needle);
  if ($length == 0) {
    return true;
  }

  return (substr($haystack, -$length) === $needle);
}

function _drulenium_vr_contains($substring, $string) {
  $pos = strpos($string, $substring);

  if($pos === false) {
    // string needle NOT found in haystack
    return false;
  }
  else {
    // string needle found in haystack
    return true;
  }

}

function _drulenium_vr_open_images($image1, $image2, &$meta)
{
  if (is_resource($image1)) {
    $im = $image1;
  }
  elseif (!$im = imagecreatefrompng($image1)) {
    trigger_error("Image 1:$image1 could not be opened", E_USER_ERROR);
    return;
  }

  if (is_resource($image2)) {
    $im2 = $image2;
  }
  elseif (!$im2 = imagecreatefrompng($image2)) {
    trigger_error("Image 2:$image2 could not be opened", E_USER_ERROR);
    return;
  }


  $meta['width1'] = imagesx($im);
  $meta['height1'] = imagesy($im);
  $meta['width2'] = imagesx($im2);
  $meta['height2'] = imagesy($im2);

  $meta['im1'] = $im;
  $meta['im2'] = $im2;

  return TRUE;
}

function _drulenium_vr_image_compare(&$meta, $RTolerance=0, $GTolerance=0, $BTolerance=0, $WarningTolerance=1, $ErrorTolerance=5) {
  $im = $meta['im1'];
  $im2 = $meta['im2'];

  $OutOfSpec = 0;
  $width1 = $meta['width1'];
  $height1 = $meta['height1'];
  $width2 = $meta['width2'];
  $height2 = $meta['height2'];

  // By columns.
  for ($width = 0; $width <= $width1 - 1; $width++)
  {
    for ($height = 0; $height <= $height1 - 1; $height++)
    {
      $rgb = imagecolorat($im, $width, $height);
      $r1 = ($rgb >> 16) & 0xFF;
      $g1 = ($rgb >> 8) & 0xFF;
      $b1 = $rgb & 0xFF;

      if($width <= $width2 && $height < $height2){
        $rgb = imagecolorat($im2, $width, $height);
        $r2 = ($rgb >> 16) & 0xFF;
        $g2 = ($rgb >> 8) & 0xFF;
        $b2 = $rgb & 0xFF;

        if (!($r1>=$r2-$RTolerance && $r1<=$r2+$RTolerance))
          $OutOfSpec++;

        if (!($g1>=$g2-$GTolerance && $g1<=$g2+$GTolerance))
          $OutOfSpec++;

        if (!($b1>=$b2-$BTolerance && $b1<=$b2+$BTolerance))
          $OutOfSpec++;
      }
      else {
        $OutOfSpec = $OutOfSpec + 3;
      }
    }
  }
  $TotalPixelsWithColors = (imagesx($im) * imagesy($im)) * 3;

  $RET['PixelsByColors'] = $TotalPixelsWithColors;
  $RET['PixelsOutOfSpec'] = $OutOfSpec;

  if ($OutOfSpec != 0 && $TotalPixelsWithColors != 0)
  {
    $PercentOut = ($OutOfSpec / $TotalPixelsWithColors) * 100;
    $RET['PercentDifference'] = $PercentOut;
    if ($PercentOut >= $WarningTolerance) //difference triggers WARNINGTOLERANCE%
      $RET['WarningLevel'] = TRUE;
    if ($PercentOut >= $ErrorTolerance) //difference triggers ERRORTOLERANCE%
      $RET['ErrorLevel'] = TRUE;
  }

  return $RET;
}

/**
 * Access hook for Visual compare.
 *
 * @param int|string $from First ID.
 * @param int|string $to Second ID.
 * @param string $token Received token.
 * @return bool Access or not.
 */
function _drulenium_visual_regression_access_vr_compare($from, $to, $token = NULL) {
  $token_access = isset($token) && $token == _drulenium_secure_link_token($from, $to);
  return $token_access || user_access('access_visual_test_reports');
}

/**
 * Create a token based on two release ID's.
 *
 * @param int|string $from First ID
 * @param int|string $to Second ID
 * @return string Secure token.
 */
function _drulenium_secure_link_token($from, $to) {
  return sha1($from . $to . drupal_get_private_key());
}

function _drulenium_secure_compare_link($from, $to) {
  return "vr/compare/$from/$to/" . _drulenium_secure_link_token($from, $to);
}
