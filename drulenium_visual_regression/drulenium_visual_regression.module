<?php

/**
 * Implements hook_menu().
 */
function drulenium_visual_regression_menu() {
  $items['admin/structure/drulenium/vr'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'Visual Regression',
    'description' => 'Configuration for Visual Regression Testing.',
    'page callback' => 'drulenium_visual_regression_releases',
    'access callback' => 'user_access',
    'access arguments' => array(
    	'create_test_cases'
    	)
    	);
    	$items['admin/structure/drulenium/vr/release/%'] = array(
      'title' => 'Release',
      'page callback' => 'drulenium_visual_regression_release_detail',
  	  'page arguments' => array(5),
      'access arguments' => array('create_test_cases'),
      'type' => MENU_CALLBACK,
    	);
    	$items['admin/structure/drulenium/vr/release/status/%'] = array(
      'title' => 'Manual Release Status check',
      'page callback' => 'drulenium_visual_regression_release_status',
  	  'page arguments' => array(6),
      'access arguments' => array('create_test_cases'),
      'type' => MENU_CALLBACK,
    	);
    	$items['admin/structure/drulenium/vr/compare/%/%'] = array(
      'title' => 'Compare',
      'page callback' => 'drulenium_visual_regression_releases_compare',
  	  'page arguments' => array(5,6),
      'access arguments' => array('create_test_cases'),
      'type' => MENU_CALLBACK,
    	);
    	$items['admin/structure/drulenium/vr/compare/status/%/%'] = array(
      'title' => 'Manual Release Status check',
      'page callback' => 'drulenium_visual_regression_compare_status',
  	  'page arguments' => array(6,7),
      'access arguments' => array('create_test_cases'),
      'type' => MENU_CALLBACK,
    	);

    	return $items;
}

/**
 * Implements hook_theme().
 */
function drulenium_visual_regression_theme() {
  return array(
    'drulenium_visual_regression_compare_releases_form' => array(
      'render element' => 'form',
  ),
  );
}

function drulenium_visual_regression_compare_status($base_release_secure_id, $cmp_release_secure_id) {
  // RPC call
  $result = xmlrpc('http://drulenium.technikh.com/xmlrpc.php', array(
      'drulenium.api_compare_status' => array($base_release_secure_id, $cmp_release_secure_id),
  ));
  //dsm($result);
  foreach ($result as $cmp_res){
    $diff_percent = $cmp_res['diff_percent'];
    if(!empty($diff_percent)){
      $relative_url = substr($cmp_res['url'], strpos($cmp_res['url'], "?q=")+3);
      $gif_link = "";
      if(!empty($cmp_res['diff_gif'])){
        $gif_link = "http://drulenium.technikh.com/".$cmp_res['diff_gif'];
      }
      $result = db_query("Update drulenium_vr_results res
    LEFT JOIN drulenium_vr_runs run on res.run_base_id = run.rid
    SET  diff_percent = :diff_percent, diff_gif = :diff_gif
    where run.url = :url", 
      array(':url' => $relative_url, ':diff_percent' => $diff_percent, ':diff_gif' => $gif_link));
    }
  }
  $query = db_select('drulenium_vr_releases', 'vr_re');
  $base_release_id = $query
  ->fields('vr_re', array('rid'))
  ->condition('vr_re.secure_id', $base_release_secure_id)
  ->execute()->fetchfield();

  $query = db_select('drulenium_vr_releases', 'vr_re');
  $cmp_release_id = $query
  ->fields('vr_re', array('rid'))
  ->condition('vr_re.secure_id', $cmp_release_secure_id)
  ->execute()->fetchfield();
  variable_set("drulenium_vr_last_check_{$base_release_id}_{$cmp_release_id}", time());
  drupal_goto("admin/structure/drulenium/vr/compare/$base_release_id/$cmp_release_id");

  return "test";
}

function drulenium_visual_regression_release_status($secureid) {
  // RPC call
  $result = xmlrpc('http://drulenium.technikh.com/xmlrpc.php', array(
      'drulenium.api_release_status' => array($secureid),
  ));
  //dsm($result);
  $re_id = $result[0]['re_id'];
  foreach ($result as $run){
    $relative_url = substr($run['url'], strpos($run['url'], "?q=")+3);
    db_update('drulenium_vr_runs')
    ->fields(array(
      'snapshot' => $run['snapshot'],
    ))
    ->condition('re_id', $re_id)
    ->condition('url', $relative_url)
    ->execute();
  }
  variable_set('drulenium_vr_last_check'.$re_id, time());
  drupal_goto("admin/structure/drulenium/vr/release/".$re_id);
}

function drulenium_visual_regression_release_detail($re_id) {
  $query = db_select('drulenium_vr_releases', 'vr_re');
  $result = $query
  ->fields('vr_re', array('secure_id','name'))
  ->condition('vr_re.rid', $re_id)
  ->execute();
  $release = $result->fetchAssoc();
  $secure_id = $release['secure_id'];
  drupal_set_title("Release: ".$release['name']);

  $last = variable_get("drulenium_vr_last_check".$re_id);
  $output = l(t('Drulenium dashboard'), 'admin/structure/drulenium/vr');
  $output .= '<div class="update checked">';
  $output .= $last ? t('Last checked: @time ago', array('@time' => format_interval(REQUEST_TIME - $last))) : t('Last checked: never');
  $output .= ' <span class="check-manually">(' . l(t('Check manually'), 'admin/structure/drulenium/vr/release/status/'.$secure_id, array('query' => drupal_get_destination())) . ')</span>';
  $output .= "</div>\n";
  $header = array(t('Id'), t('URL'), t('Snapshot'));
  $rows = array();
  $result = db_select('drulenium_vr_runs', 'ru')
  ->fields('ru')
  ->condition('re_id', $re_id,'=')
  ->execute();

  while($release = $result->fetchAssoc()) {
    $snapshot = "";
    if(!empty($release['snapshot'])){
      $snapshot = l("Snapshot", 'http://drulenium.technikh.com/'.$release['snapshot']);
    }
    $rows[] = array(
    $release['rid'],
    l($release['url'], $release['url']),
    $snapshot,
    );
  }
  $output .= theme('table', array('header' => $header, 'rows' => $rows));
  return $output;
}

function drulenium_visual_regression_releases_compare($old_re_id, $new_re_id) {
  // if new id is less than old id, swap for comparison.
  if($new_re_id < $old_re_id){
    $tmp = $new_re_id;
    $new_re_id = $old_re_id;
    $old_re_id = $tmp;
  }

  $query = db_select('drulenium_vr_releases', 'vr_re');
  $result = $query
  ->fields('vr_re', array('secure_id', 'name'))
  ->condition('vr_re.rid', $old_re_id)
  ->execute();
  $release = $result->fetchAssoc();
  $base_release_secure_id = $release['secure_id'];
  $base_release_name = $release['name'];

  $query = db_select('drulenium_vr_releases', 'vr_re');
  $result = $query
  ->fields('vr_re', array('secure_id', 'name'))
  ->condition('vr_re.rid', $new_re_id)
  ->execute();
  $release = $result->fetchAssoc();
  $cmp_release_secure_id = $release['secure_id'];
  $cmp_release_name = $release['name'];
  
  drupal_set_title("Compare: ".$base_release_name." & ".$cmp_release_name);

  $last = variable_get("drulenium_vr_last_check_{$old_re_id}_{$new_re_id}");
  $output = l(t('Drulenium dashboard'), 'admin/structure/drulenium/vr');
  $output .= '<div class="update checked">';
  $output .= $last ? t('Last checked: @time ago', array('@time' => format_interval(REQUEST_TIME - $last))) : t('Last checked: never');
  $output .= ' <span class="check-manually">(' . l(t('Check manually'), 'admin/structure/drulenium/vr/compare/status/'.$base_release_secure_id.'/'.$cmp_release_secure_id, array('query' => drupal_get_destination())) . ')</span>';
  $output .= "</div>\n";
  $header = array(t('Id'), t('URL'), t('Percentage Difference'), t('GIF'));
  $rows = array();
  $query = db_select('drulenium_vr_results', 're');
  $query->join('drulenium_vr_runs', 'b_ru', 're.run_base_id = b_ru.rid');
  $query->join('drulenium_vr_runs', 'c_ru', 're.run_cmp_id = c_ru.rid');
  $query->fields('re');
  $query->fields('b_ru');
  $query->condition('b_ru.re_id', $old_re_id);
  $query->condition('c_ru.re_id', $new_re_id);
  $result = $query->execute();

  while($cmp_result = $result->fetchAssoc()) {
    // dsm($cmp_result);
    $gif_link = "";
    if(!empty($cmp_result['diff_gif'])){
      $gif_link = l("GIF", $cmp_result['diff_gif']);
    }
    $rows[] = array(
    $cmp_result['rid'],
    l($cmp_result['url'], $cmp_result['url']),
    $cmp_result['diff_percent'],
    $gif_link,
    );
  }

  if(!count($rows)){
    $result = db_query("Insert into drulenium_vr_results (run_base_id, run_cmp_id)
select substring_index(qids, ',', 1) as base_qid, substring_index(qids, ',', -1) as cmp_qid 
from (select GROUP_CONCAT(q.rid) AS qids from drulenium_vr_runs q 
where q.re_id = :base_release_id or q.re_id = :cmp_release_id group by url) q1", 
    array(':base_release_id' => $old_re_id, ':cmp_release_id' => $new_re_id));

    //If local table is empty, make a rpc call to create entries
    $result = xmlrpc('http://drulenium.technikh.com/xmlrpc.php', array(
      'drulenium.api_create_compare_request' => array($base_release_secure_id, $cmp_release_secure_id),
    ));
    drupal_set_message($result);
    //http://devdemo.technikh.com/admin/structure/drulenium/vr/compare/2/1
    drupal_goto("admin/structure/drulenium/vr/compare/$old_re_id/$new_re_id");
  }

  $output .= theme('table', array('header' => $header, 'rows' => $rows));
  return $output;
}

function drulenium_visual_regression_releases() {
  $build_form = drupal_get_form('drulenium_visual_regression_create_release_form');
  $output = drupal_render($build_form);
  $compare_form = drupal_get_form('drulenium_visual_regression_compare_releases_form');
  $output .= drupal_render($compare_form);
  return $output;
}

function drulenium_visual_regression_create_release_form($form, &$form_state) {
  $form = array();
  $form['drulenium_vr_config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Configure'),
    '#description' => t('Configure the page paths that need to be tested.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['drulenium_vr_config']['drulenium_vr_release_name'] = array(
    '#title' => t('Release name'), 
    '#type' => 'textfield', 
    '#required' => TRUE, 
    '#description' => t('Name of the release. default is current date & time.'), 
    '#default_value' => format_date(REQUEST_TIME),
  );
  $form['drulenium_vr_config']['pages'] = array(
      '#type' => 'vertical_tabs',
      '#attached' => array(
          'js' => array(drupal_get_path('module', 'block') . '/block.js'),
  ),
  );

  // Per-path pages.
  $form['drulenium_vr_config']['pages']['path'] = array(
      '#type' => 'fieldset',
      '#title' => t('Pages'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'pages',
      '#weight' => 0,
  );
  $form['drulenium_vr_config']['pages']['path']['drulenium_vr_path_custom'] = array(
      '#type' => 'textarea',
      '#title' => t('Test on specific pages'),
      '#description' => "Specify pages by using their paths. Enter one path per line. The '*' character is a wildcard. Example paths are blog for the blog page and blog/* for every personal blog.",
      '#default_value' => variable_get('drulenium_vr_path_custom', 'blog/*'),
  );

  // Per-node-type testing.
  $form['drulenium_vr_config']['pages']['node'] = array(
      '#type' => 'fieldset',
      '#title' => t('Content Types'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'pages',
      '#weight' => 20,
  );
  $node_types = array();
  $result = db_query(
      'SELECT type, name FROM {node_type}');
  foreach ($result as $row) {
    $node_types[$row->type] = $row->name;
  }
  $form['drulenium_vr_config']['pages']['node']['drulenium_vr_node_custom'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Test for specific content types'),
      '#options' => $node_types,
      '#description' => t('Test on pages that display content of the given type(s).'),
      '#default_value' => variable_get('drulenium_vr_node_custom', array()),
  );

  // Per-term-type testing.
  $form['drulenium_vr_config']['pages']['term'] = array(
      '#type' => 'fieldset',
      '#title' => t('Taxonomy'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#group' => 'pages',
      '#weight' => 20,
  );
  $vocabs = array();
  $result = db_query(
      'SELECT vid, name FROM {taxonomy_vocabulary}');
  foreach ($result as $row) {
    $vocabs[$row->vid] = $row->name;
  }
  $form['drulenium_vr_config']['pages']['term']['drulenium_vr_term_custom'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Test for specific Taxonomy Vocabularies'),
      '#options' => $vocabs,
      '#description' => t('Test on taxonomy term pages of the given Vocabulary type(s)'),
      '#default_value' => variable_get('drulenium_vr_term_custom', array()),
  );
  $site_email = variable_get('site_mail', '');
  $form['drulenium_vr_config']['drulenium_vr_release_notify_email'] = array(
    '#title' => t('Email'), 
    '#type' => 'textfield', 
    '#description' => t('Email to Notify on completion.'), 
    '#default_value' => variable_get('drulenium_vr_release_notify_email', $site_email),
  );

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Take Snapshot'),
  );
  return $form;
}

function drulenium_visual_regression_create_release_form_validate($form, &$form_state) {
}

function drulenium_visual_regression_create_release_form_submit($form, &$form_state) {
  //dsm($form_state);
  variable_set('drulenium_vr_path_custom', $form_state['values']['drulenium_vr_path_custom']);
  variable_set('drulenium_vr_node_custom', $form_state['values']['drulenium_vr_node_custom']);
  variable_set('drulenium_vr_term_custom', $form_state['values']['drulenium_vr_term_custom']);
  $notify_email = $form_state['values']['drulenium_vr_release_notify_email'];
  variable_set('drulenium_vr_release_notify_email', $notify_email);

  $secureid = drupal_hash_base64(drupal_random_bytes(55));

  $fields = array(
      'name' => $form_state['values']['drulenium_vr_release_name'],
      'secure_id' => $secureid,
      'created' => REQUEST_TIME,
  );
  $release_id = db_insert('drulenium_vr_releases')->fields($fields)->execute();

  $pages_array = array();

  $specific_pages = $form_state['values']['drulenium_vr_path_custom'];
  $specific_node_types = $form_state['values']['drulenium_vr_node_custom'];
  $specific_term_types = $form_state['values']['drulenium_vr_term_custom'];

  $selected_node_types_array = array();
  $specific_node_types_pages_array = array();
  foreach ($specific_node_types as $node_type) {
    if(!empty($node_type)){
      $selected_node_types_array[]=$node_type;
    }
  }
  if(!empty($selected_node_types_array)){
    $result = db_query(
        'SELECT nid, type FROM {node} n WHERE status = 1 AND type IN (:types)',
    array(':types' => $selected_node_types_array)
    );
    foreach ($result as $row) {
      $nid = $row->nid;
      $link_path = "node/$nid";
      $pages_array[]=$link_path;
    }
  }


  $selected_term_types_array = array();
  $specific_term_types_pages_array = array();
  foreach ($specific_term_types as $term_type) {
    if(!empty($term_type)){
      $selected_term_types_array[]=$term_type;
      //  $debug_log .= $term_type."<br/>";
    }
  }
  if(!empty($selected_term_types_array)){
    $result = db_query(
        'SELECT vid, tid FROM {taxonomy_term_data} ttd WHERE vid IN (:types)',
    array(':types' => $selected_term_types_array)
    );
    foreach ($result as $row) {
      $tid = $row->tid;
      // $debug_log .= $tid."<br/>";
      $link_path = "taxonomy/term/$tid";
      $pages_array[]=$link_path;
    }
  }


  $specific_pages_array = explode("\n",$specific_pages);
  // $debug_log .= print_r($specific_pages_array, TRUE)."<br/>";
  // $pages = $options['pages'];
  // $pages_array = explode("\n",$pages);
  foreach ($specific_pages_array as $key => $page) {
    $page = trim($page);
    //    $debug_log .= $page."<br/>";
    if(_drulenium_endsWith($page, "*")){
      //   $debug_log .= $page."<br/>";
      //unset($specific_pages_array[$key]);
      $pattern = substr($page, 0, strlen($page)-1);
      // $debug_log .= substr($page, 0, strlen($page)-1);
      $result = db_query(
          'SELECT link_path FROM {menu_links} m WHERE link_path like :pattern',
      array(':pattern' => db_like($pattern).'%')
      );
      //    $debug_log .= print_r($result, TRUE)."<br/>";
      foreach ($result as $row) {
        //   $debug_log .= print_r($row, TRUE)."<br/>";
        //break;
        $link_path = $row->link_path;
        if(_drulenium_contains("%", $link_path)){
          continue;
        }
        //$link_path = str_replace("%","1",$link_path);
        $pages_array[]=$link_path;
      }

      $result = db_query(
          'SELECT alias FROM {url_alias} u WHERE alias like :pattern',
      array(':pattern' => db_like($pattern).'%')
      );
      foreach ($result as $row) {
        $link_path = $row->alias;
        $pages_array[]=$link_path;
      }
    }else{
      $pages_array[] = $page;
    }
  }

  foreach ($pages_array as $key => $page) {
    if(empty($page)){
      unset($pages_array[$key]);
    }else{
      $fields = array(
	      're_id' => $release_id,
	      'url' => $page,
      );
      $result = db_insert('drulenium_vr_runs')->fields($fields)->execute();
    }
  }

  //RPC call to add job in remote queue.
  global $base_url;
  $result = xmlrpc('http://drulenium.technikh.com/xmlrpc.php', array(
      'drulenium.api_create_release' => array($release_id, $secureid, $base_url, $pages_array, $notify_email),
  ));
  //dsm($result);
  drupal_goto("admin/structure/drulenium/vr/release/".$release_id);
}

function drulenium_visual_regression_compare_releases_form($form, $form_state) {
  $result = db_select('drulenium_vr_releases', 're')
  ->fields('re', array('name', 'rid'))
  ->execute();
  $release_ids = array();
  while($release = $result->fetchAssoc()) {
    $release_ids[$release['rid']] = '';
    $form['info'][$release['rid']] = array(
        '#markup' => l($release['name'],"admin/structure/drulenium/vr/release/".$release['rid']),
    );
    $operations = array(
          '#markup' => l(t('Delete'), ""),
    );
    $form['operations'][$release['rid']][0] = $operations;

  }
  if(empty($release_ids)){
    return '';
  }
  $new_vid = key($release_ids);
  next($release_ids);
  $old_vid = key($release_ids);
  $form['diff']['old'] = array(
    '#type' => 'radios',
    '#options' => $release_ids,
    '#default_value' => $old_vid,
  );
  $form['diff']['new'] = array(
    '#type' => 'radios',
    '#options' => $release_ids,
    '#default_value' => $new_vid,
  );

  $form['submit'] = array('#type' => 'submit', '#value' => t('Compare'));


  $form['#attached']['css'] = array('sites/all/modules/diff/css/diff.default.css');
  $form['#attached']['js'] = array('sites/all/modules/diff/js/diff.js');
  // dsm($form);
  return $form;
}

function drulenium_visual_regression_compare_releases_form_submit($form, &$form_state) {
  // dsm($form_state);
  $old_release = $form_state['values']['old'];
  $new_release = $form_state['values']['new'];
  drupal_goto("admin/structure/drulenium/vr/compare/$old_release/$new_release");
}

/**
 * Theme function to display the revisions formular.
 */
function theme_drulenium_visual_regression_compare_releases_form($vars) {
  $form = $vars['form'];
  if(!isset($form['diff'])){
    return '';
  }
  $output = '';

  // Overview table:
  $header = array(
  t('Release'),
  array('data' => drupal_render($form['submit']), 'colspan' => 2),
  array('data' => t('Operations'), 'colspan' => 2),
  );
  if (isset($form['info']) && is_array($form['info'])) {
    foreach (element_children($form['info']) as $key) {
      $row = array();
      if (isset($form['operations'][$key][0])) {
        // Note: even if the commands for revert and delete are not permitted,
        // the array is not empty since we set a dummy in this case.
        $row[] = drupal_render($form['info'][$key]);
        $row[] = drupal_render($form['diff']['old'][$key]);
        $row[] = drupal_render($form['diff']['new'][$key]);
        $row[] = drupal_render($form['operations'][$key][0]);
        $row[] = drupal_render($form['operations'][$key][1]);
        $rows[] = array(
          'data' => $row,
          'class' => array('diff-revision'),
        );
      }
      else {
        // (no commands to delete).
        $row[] = array(
          'data' => "No Operations.",
          'class' => array('revision-current'),
        );
      }
    }
  }
  $output .= theme('table__diff__revisions', array(
    'header' => $header,
    'rows' => $rows,
    'sticky' => FALSE,
    'attributes' => array('class' => 'diff-revisions'),
  ));

  $output .= drupal_render_children($form);
  return $output;
}

