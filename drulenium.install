<?php
/**
 * @file
 * Install, update and uninstall functions for the drulenium module.
 */

/**
 * Implements hook_schema().
 */
function drulenium_schema() {
  $schema = array();

  // Schema for entity
  $schema['drulenium'] = array(
    'description' => 'The base table for our drulenium entity.',
    'fields' => array(
      'drulenium_id' => array(
        'description' => 'Primary key of the drulenium entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'The bundle label/name',
        'type' => 'varchar',
        'length' => 555,
        'not null' => TRUE,
        'default' => '',
      ),
      'secure_id' => array(
        'description' => 'Secure ID.',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
        'not null' => TRUE,
      ),
      'base_url' => array(
        'description' => 'Base URL.',
        'type' => 'varchar',
        'length' => 200,
        'default' => '',
        'not null' => TRUE,
      ),
      'test_id' => array(
        'description' => 'The ID of the test.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      // If we allow multiple bundles, then the schema must handle that;
      // We'll put it in the 'bundle_type' field to avoid confusion with the
      // entity type.
      'bundle_type' => array(
        'description' => 'The bundle type',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'console_log' => array(
        'description' => 'A complete log of the test',
        'type' => 'text',
        'size' => 'medium',
      ),
      'status' => array(
        'description' => 'Boolean indicating whether the test has passed or failed.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'created' => array(
        'description' => 'The Unix timestamp of the test creation time.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'started' => array(
        'description' => 'The Unix timestamp of the test starting time.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'completed' => array(
        'description' => 'The Unix timestamp of the test completion time.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'settings' => array(
        'type' => 'blob',
        'size' => 'big',
        'description' => 'Serialized array of settings.',
      ),
    ),
    'primary key' => array('drulenium_id'),
  );

  $schema['drulenium_preset'] = array(
    'description' => 'Storage for user-defined drulenium plugins templates.',
    'export' => array(
      'key' => 'name',
      'key name' => 'Name',
      'primary key' => 'oid',
      'identifier' => 'drulenium_preset',
      'default hook' => 'default_drulenium_preset', // Function hook name.
      'api' => array(
        'owner' => 'drulenium',
        'api' => 'drulenium', // Base name for api include files.
        'minimum_version' => 1,
        'current_version' => 1,
      ),
      'load callback' => 'drulenium_preset_load',
    ),
    'fields' => array(
      'oid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary ID field for the table. Not used for anything except internal lookups.',
        'no export' => TRUE, // Do not export database-only keys.
      ),
      'name' => array(
        'description' => 'The primary identifier for a plugin preset.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'description' => array(
        'description' => 'Description for this plugin preset.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'category' => array(
        'description' => 'Category for this plugin preset.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'settings' => array(
        'description' => 'Serialized storage of drupal related plugin settings.',
        'type' => 'text',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('oid'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  return $schema;

}

/**
 * Add new table {drulenium}.
 */
function drulenium_update_7000() {
  $schema = array();

  $schema['drulenium'] = array(
    'description' => 'The base table for our drulenium entity.',
    'fields' => array(
      'drulenium_id' => array(
        'description' => 'Primary key of the drulenium entity.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'title' => array(
        'description' => 'The bundle label/name',
        'type' => 'varchar',
        'length' => 555,
        'not null' => TRUE,
        'default' => '',
      ),
      'secure_id' => array(
        'description' => 'Secure ID.',
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
        'not null' => TRUE,
      ),
      'base_url' => array(
        'description' => 'Base URL.',
        'type' => 'varchar',
        'length' => 200,
        'default' => '',
        'not null' => TRUE,
      ),
      'test_id' => array(
        'description' => 'The ID of the test.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
      ),
      // If we allow multiple bundles, then the schema must handle that;
      // We'll put it in the 'bundle_type' field to avoid confusion with the
      // entity type.
      'bundle_type' => array(
        'description' => 'The bundle type',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'console_log' => array(
        'description' => 'A complete log of the test',
        'type' => 'text',
        'size' => 'medium',
      ),
      'status' => array(
        'description' => 'Boolean indicating whether the test has passed or failed.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'created' => array(
        'description' => 'The Unix timestamp of the test creation time.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'started' => array(
        'description' => 'The Unix timestamp of the test starting time.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'completed' => array(
        'description' => 'The Unix timestamp of the test completion time.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'settings' => array(
        'type' => 'blob',
        'size' => 'big',
        'description' => 'Serialized array of settings.',
      ),
    ),
    'primary key' => array('drulenium_id'),
  );

  db_create_table('drulenium', $schema['drulenium']);
}
